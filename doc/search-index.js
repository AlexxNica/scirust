var searchIndex = {};
searchIndex['srmat'] = {"items":[[0,"","srmat",""],[1,"Matrix","","\nRepresents a matrix of numbers."],[10,"from_scalar","","Constructs a scalar matrix",0],[10,"new","","",0],[10,"zeros","","Constructs a matrix of all zeros",0],[10,"ones","","Constructs a matrix of all ones.",0],[10,"identity","","Constructs an identity matrix",0],[10,"from_slice","","",0],[10,"from_iter","","",0],[10,"diag_from_vec","","Construct a diagonal matrix from a vector",0],[10,"unit_vector","","Constructs a unit vector\n(1, 0, 0), (0, 1, 0), (0, 0, 1), etc.",0],[10,"num_rows","","",0],[10,"num_cols","","Returns the number of columns in the matrix",0],[10,"size","","Returns the size of matrix in an (r, c) tuple",0],[10,"num_cells","","Returns the number of cells in matrix",0],[10,"is_row","","Indicates if the matrix is a row vector",0],[10,"is_col","","Indicates if the matrix is a column vector",0],[10,"is_scalar","","Indicates if the matrix is a scalar actually",0],[10,"is_vector","","Indicates if the matrix is a vector",0],[10,"is_empty","","Indicates if the matrix is empty",0],[10,"is_square","","Indicates if the matrix is square",0],[10,"stride","","Returns the number of actual memory elements\nper column stored in the memory",0],[10,"capacity","","",0],[10,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",0],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",0],[10,"get","","",0],[10,"set","","",0],[10,"index_to_cell","","Converts an index to cell address (row, column)",0],[10,"cell_to_index","","Converts a cell address to an index (r, c) to index",0],[10,"is_identity","","Returns if the matrix is an identity matrix",0],[10,"is_diagonal","","Returns if the matrix is a diagonal matrix",0],[10,"to_std_vec","","Converts the matrix to vector from standard library",0],[10,"to_scalar","","Converts the matrix to a scalar",0],[10,"row","","Returns the r'th row vector",0],[10,"col","","Returns the c'th column vector",0],[10,"sub_matrix","","Extract a submatrix from the matrix\nrows can easily repeat if the number of requested rows is higher than actual rows\ncols can easily repeat if the number of requested cols is higher than actual cols",0],[10,"repeat_matrix","","",0],[10,"diagonal","","Extracts the primary diagonal from the matrix as a vector",0],[10,"add_scalar","","Add the matrix by a scalar",0],[10,"mul_scalar","","Multiply the matrix by a scalar",0],[10,"div_scalar","","Divide the matrix by a scalar",0],[10,"pow","","Computes power of a matrix",0],[10,"transpose","","Computes the transpose of a matrix.\nThis doesn't involve complex conjugation.",0],[10,"unary_minus","","Computes the unary minus of a matrix",0],[10,"max_row_wise","","Returns a column vector consisting of maximum over each row",0],[10,"max_col_wise","","Returns a row vector consisting of maximum over each column",0],[10,"min_row_wise","","Returns a column vector consisting of minimum over each row",0],[10,"min_col_wise","","Returns a row vector consisting of minimum over each column",0],[10,"min_scalar","","",0],[10,"max_scalar","","",0],[10,"is_logical","","Returns if an integer matrix is a logical matrix",0],[10,"is_finite","","Returns a matrix showing all the cells which are finite",0],[10,"is_infinite","","Returns a matrix showing all the cells which are infinite",0],[10,"index","","",0],[10,"clone","","Creates a clone of the matrix",0],[10,"fmt","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"mul","","",0],[10,"eq","","",0],[10,"mul_elt","","Multiplies matrices element by element",0],[10,"div_elt","","Divides matrices element by element",0],[10,"drop","","",0],[10,"as_slice_","","Returns a slice into `self`.",0],[4,"MatrixI64","","A matrix of 64-bit signed integers"],[4,"MatrixF64","","A matrix of 64-bit floating point numbers."],[6,"MatrixMul","","\nThis is not yet implemented."],[10,"from_scalar","","Constructs a scalar matrix",0],[10,"new","","",0],[10,"zeros","","Constructs a matrix of all zeros",0],[10,"ones","","Constructs a matrix of all ones.",0],[10,"identity","","Constructs an identity matrix",0],[10,"from_slice","","",0],[10,"from_iter","","",0],[10,"diag_from_vec","","Construct a diagonal matrix from a vector",0],[10,"unit_vector","","Constructs a unit vector\n(1, 0, 0), (0, 1, 0), (0, 0, 1), etc.",0],[10,"num_rows","","",0],[10,"num_cols","","Returns the number of columns in the matrix",0],[10,"size","","Returns the size of matrix in an (r, c) tuple",0],[10,"num_cells","","Returns the number of cells in matrix",0],[10,"is_row","","Indicates if the matrix is a row vector",0],[10,"is_col","","Indicates if the matrix is a column vector",0],[10,"is_scalar","","Indicates if the matrix is a scalar actually",0],[10,"is_vector","","Indicates if the matrix is a vector",0],[10,"is_empty","","Indicates if the matrix is empty",0],[10,"is_square","","Indicates if the matrix is square",0],[10,"stride","","Returns the number of actual memory elements\nper column stored in the memory",0],[10,"capacity","","",0],[10,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",0],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",0],[10,"get","","",0],[10,"set","","",0],[10,"index_to_cell","","Converts an index to cell address (row, column)",0],[10,"cell_to_index","","Converts a cell address to an index (r, c) to index",0],[10,"is_identity","","Returns if the matrix is an identity matrix",0],[10,"is_diagonal","","Returns if the matrix is a diagonal matrix",0],[10,"to_std_vec","","Converts the matrix to vector from standard library",0],[10,"to_scalar","","Converts the matrix to a scalar",0],[10,"row","","Returns the r'th row vector",0],[10,"col","","Returns the c'th column vector",0],[10,"sub_matrix","","Extract a submatrix from the matrix\nrows can easily repeat if the number of requested rows is higher than actual rows\ncols can easily repeat if the number of requested cols is higher than actual cols",0],[10,"repeat_matrix","","",0],[10,"diagonal","","Extracts the primary diagonal from the matrix as a vector",0],[10,"add_scalar","","Add the matrix by a scalar",0],[10,"mul_scalar","","Multiply the matrix by a scalar",0],[10,"div_scalar","","Divide the matrix by a scalar",0],[10,"pow","","Computes power of a matrix",0],[10,"transpose","","Computes the transpose of a matrix.\nThis doesn't involve complex conjugation.",0],[10,"unary_minus","","Computes the unary minus of a matrix",0],[10,"max_row_wise","","Returns a column vector consisting of maximum over each row",0],[10,"max_col_wise","","Returns a row vector consisting of maximum over each column",0],[10,"min_row_wise","","Returns a column vector consisting of minimum over each row",0],[10,"min_col_wise","","Returns a row vector consisting of minimum over each column",0],[10,"min_scalar","","",0],[10,"max_scalar","","",0],[10,"is_logical","","Returns if an integer matrix is a logical matrix",0],[10,"is_finite","","Returns a matrix showing all the cells which are finite",0],[10,"is_infinite","","Returns a matrix showing all the cells which are infinite",0],[10,"index","","",0],[10,"clone","","Creates a clone of the matrix",0],[10,"fmt","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"mul","","",0],[10,"eq","","",0],[10,"mul_elt","","Multiplies matrices element by element",0],[10,"div_elt","","Divides matrices element by element",0],[10,"drop","","",0],[10,"as_slice_","","Returns a slice into `self`.",0]],"paths":[[1,"Matrix"]]};
initSearch(searchIndex);
