var searchIndex = {};
searchIndex['scirust'] = {"items":[[0,"","scirust","A generics based scientific computing library for Rust"],[0,"discrete","","Discrete mathematics\n    "],[3,"mod_n","scirust::discrete",""],[0,"matrix","scirust","Fundamental matrix structures\n    "],[1,"RowIterator","scirust::matrix","An iterator over the elements of a matrix in a row"],[1,"ColIterator","","An iterator over the elements of a matrix in a column"],[1,"CellIterator","","A column major iterator over the elements of a matrix"],[1,"Matrix","","\nRepresents a matrix of numbers."],[1,"MatrixView","","\nDefines a view on a matrix. "],[2,"MatrixError","","Errors related to matrix operations"],[12,"EmptyMatrix","","The matrix is empty",0],[12,"DimensionsMismatch","","The dimensions of two matrices mismatch",0],[12,"NonSquareMatrix","","The matrix is not a square matrix",0],[12,"NotAVector","","The object is not a vector",0],[12,"IsNotPowerOfTwo","","Is not a power of two",0],[3,"hadamard","","Returns a Hadamard matrix of size n x n"],[3,"hilbert","","Returns a Hilbert matrix.\n"],[3,"from_range_cw","","Returns a matrix whose entries are picked up from\na range in column wise order."],[3,"from_range_cw_f64","","Returns a 64-bit floating point matrix whose entries are\npicked up from a range in column wise order.\n"],[3,"from_range_cw_i8","","Returns an 8-bit signed integer matrix whose entries are\npicked up from a range in column wise order.\n"],[3,"from_range_cw_i16","","Returns an 16-bit signed integer matrix whose entries are\npicked up from a range in column wise order.\n"],[3,"from_range_cw_i32","","Returns an 32-bit signed integer matrix whose entries are\npicked up from a range in column wise order.\n"],[3,"from_range_cw_i64","","Returns an 64-bit signed integer matrix whose entries are\npicked up from a range in column wise order."],[3,"from_range_cw_u8","","Returns an 8-bit unsigned integer matrix whose entries are\npicked up from a range in column wise order.\n"],[3,"from_range_cw_u16","","Returns an 16-bit unsigned integer matrix whose entries are\npicked up from a range in column wise order.\n"],[3,"from_range_cw_u32","","Returns an 32-bit unsigned integer matrix whose entries are\npicked up from a range in column wise order.\n"],[3,"from_range_cw_u64","","Returns an 64-bit unsigned integer matrix whose entries are\npicked up from a range in column wise order."],[3,"from_range_cw_uint","",""],[3,"from_range_rw","","Returns a matrix whose entries are picked up from\na range in row wise order.\n"],[3,"from_range_rw_i8","","Returns an 8-bit signed integer matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"from_range_rw_i16","","Returns an 16-bit signed integer matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"from_range_rw_i32","","Returns an 32-bit signed integer matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"from_range_rw_i64","","Returns an 64-bit signed integer matrix whose entries are\npicked up from a range in row wise order."],[3,"from_range_rw_u8","","Returns an 8-bit unsigned integer matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"from_range_rw_u16","","Returns an 16-bit unsigned integer matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"from_range_rw_u32","","Returns an 32-bit unsigned integer matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"from_range_rw_u64","","Returns an 64-bit unsigned integer matrix whose entries are\npicked up from a range in row wise order."],[3,"from_range_rw_f64","","Returns a 64-bit floating point matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"from_range_rw_f32","","Returns a 32-bit floating point matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"from_range_rw_uint","","Returns a unsigned int matrix whose entries are\npicked up from a range in row wise order.\n"],[3,"matrix_cw_u8","","Returns an 8-bit unsigned integer matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_u16","","Returns a 16-bit unsigned integer matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_u32","","Returns a 32-bit unsigned integer matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_u64","","Returns a 64-bit unsigned integer matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_i8","","Returns an 8-bit signed integer matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_i16","","Returns a 16-bit signed integer matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_i32","","Returns a 32-bit signed integer matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_i64","","Returns a 64-bit signed integer matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_f32","","Returns a 32-bit float matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_f64","","Returns a 64-bit float matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_c32","","Returns a 32-bit complex matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_cw_c64","","Returns a 64-bit complex matrix whose entries are\npicked up from a slice in column wise order.\n"],[3,"matrix_rw_u8","","Returns an 8-bit unsigned integer matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_u16","","Returns a 16-bit unsigned integer matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_u32","","Returns a 32-bit unsigned integer matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_u64","","Returns a 64-bit unsigned integer matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_i8","","Returns an 8-bit signed integer matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_i16","","Returns a 16-bit signed integer matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_i32","","Returns a 32-bit signed integer matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_i64","","Returns a 64-bit signed integer matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_f32","","Returns a 32-bit float matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_f64","","Returns a 64-bit float matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_c32","","Returns a 32-bit complex matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"matrix_rw_c64","","Returns a 64-bit complex matrix whose entries are\npicked up from a slice in row wise order.\n"],[3,"col_vector","","Returns a column vector with entries from a slice.\n"],[3,"vector_u8","","Returns a 8-bit unsigned int column vector with entries from a slice.\n"],[3,"vector_u16","","Returns a 16-bit unsigned int column vector with entries from a slice.\n"],[3,"vector_u32","","Returns a 32-bit unsigned int column vector with entries from a slice.\n"],[3,"vector_u64","","Returns a 64-bit unsigned int column vector with entries from a slice.\n"],[3,"vector_i8","","Returns an 8-bit signed int column vector with entries from a slice.\n"],[3,"vector_i16","","Returns a 16-bit signed int column vector with entries from a slice.\n"],[3,"vector_i32","","Returns a 32-bit signed int column vector with entries from a slice.\n"],[3,"vector_i64","","Returns a 64-bit signed int column vector with entries from a slice.\n"],[3,"vector_f32","","Returns a 32-bit float column vector with entries from a slice.\n"],[3,"vector_f64","","Returns a 64-bit float column vector with entries from a slice.\n"],[3,"ero_switch","","Returns elementary matrix which can\nexchange rows i and j\non left multiplication.\n"],[3,"ero_scale","","Returns elementary matrix which can scale\na particular row by a factor on left multiplication.\n"],[3,"ero_scale_add","","Returns elementary matrix which can scale\na particular row by a factor and add it to\nanother row\non left multiplication.\nr_i = r_i + k * r_j"],[3,"rand_std_normal","","Generate a random matrix of uniformly distributed numbers"],[10,"fmt","","",0],[10,"new","","Creates a new iterator object",1],[10,"next","","",1],[10,"new","","Creates a new iterator object",2],[10,"next","","",2],[10,"new","","Creates a new iterator object",3],[10,"next","","",3],[10,"from_scalar","","Constructs a scalar matrix",4],[10,"new","","Constructs a new matrix of given size (uninitialized).",4],[10,"zeros","","Constructs a matrix of all zeros",4],[10,"ones","","Constructs a matrix of all ones.",4],[10,"identity","","Constructs an identity matrix",4],[10,"from_slice_cw","","Constructs a matrix from a slice of data reading\ndata in column wise order.\n    ",4],[10,"from_slice_rw","","Constructs a matrix from a slice of data reading data in row wise order.",4],[10,"from_iter_cw","","",4],[10,"from_iter_rw","","Builds a matrix from an iterator reading numbers in a\nrow-wise order",4],[10,"diag_from_vec","","Construct a diagonal matrix from a vector",4],[10,"unit_vector","","Constructs a unit vector\n(1, 0, 0), (0, 1, 0), (0, 0, 1), etc.",4],[10,"num_rows","","Returns the number of rows in the matrix",4],[10,"num_cols","","Returns the number of columns in the matrix",4],[10,"size","","Returns the size of matrix in an (r, c) tuple",4],[10,"num_cells","","Returns the number of cells in matrix",4],[10,"get","","",4],[10,"set","","",4],[10,"is_matrix","","This is a standard matrix object",4],[10,"stride","","Returns the number of actual memory elements\nper column stored in the memory",4],[10,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",4],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",4],[10,"cell_to_offset","","Maps a cell index to actual offset in the internal buffer",4],[10,"capacity","","Returns the capacity of the matrix\ni.e. the number of elements it can hold",4],[10,"is_identity","","Returns if the matrix is an identity matrix",4],[10,"is_diagonal","","Returns if the matrix is a diagonal matrix",4],[10,"is_lt","","Returns if the matrix is lower triangular",4],[10,"is_ut","","Returns if the matrix is upper triangular",4],[10,"is_triangular","","Returns if the matrix is triangular",4],[10,"row_iter","","Returns an iterator over a specific row of matrix",4],[10,"col_iter","","Returns an iterator over a specific column of the matrix",4],[10,"cell_iter","","Returns an iterator over all cells  of the matrix",4],[10,"repeat_matrix","","",4],[10,"diagonal_vector","","Extracts the primary diagonal from the matrix as a vector",4],[10,"diagonal_matrix","","Extracts the primary diagonal from the matrix as a matrix of same size",4],[10,"ut","","Returns the upper triangular part of the matrix as a new matrix",4],[10,"lt","","Returns the lower triangular part of the matrix as a new matrix",4],[10,"add_scalar","","Add the matrix by a scalar\nReturns a new matrix",4],[10,"mul_scalar","","Multiply the matrix by a scalar\nReturns a new matrix",4],[10,"div_scalar","","Divide the matrix by a scalar\nReturns a new matrix",4],[10,"pow","","Computes power of a matrix\nReturns a new matrix",4],[10,"transpose","","Computes the transpose of a matrix.\nThis doesn't involve complex conjugation.\nReturns a new matrix",4],[10,"unary_minus","","Computes the unary minus of a matrix",4],[10,"inner_prod","","Inner product or dot product of two vectors\nBoth must be column vectors\nBoth must have same length\nresult = a' * b.",4],[10,"outer_prod","","Outer product of two vectors\nBoth must be column vectors\nBoth must have same length\nresult = a * b'.",4],[10,"append_columns","","Appends one or more columns at the end of matrix",4],[10,"prepend_columns","","Prepends one or more columns at the beginning of matrix",4],[10,"insert_columns","","Inserts columns at the specified location",4],[10,"append_rows","","Appends one or more rows at the bottom of matrix",4],[10,"prepend_rows","","Prepends one or more rows at the top of matrix",4],[10,"insert_rows","","Inserts rows at the specified location",4],[10,"view","","Creates a view on the matrix",4],[10,"min_scalar","","",4],[10,"max_scalar","","",4],[10,"min_scalar_value","","Returns the minimum scalar value",4],[10,"max_scalar_value","","Returns the maximum scalar value",4],[10,"min_abs_scalar","","",4],[10,"max_abs_scalar","","",4],[10,"min_abs_scalar_value","","Returns the absolute minimum scalar value",4],[10,"max_abs_scalar_value","","Returns the absolute maximum scalar value",4],[10,"is_logical","","Returns if an integer matrix is a logical matrix",4],[10,"is_finite","","Returns a matrix showing all the cells which are finite",4],[10,"is_infinite","","Returns a matrix showing all the cells which are infinite",4],[10,"det","","Returns determinant of the matrix",4],[10,"index","","",4],[10,"clone","","Creates a clone of the matrix",4],[10,"fmt","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"mul","","",4],[10,"eq","","",4],[10,"mul_elt","","Multiplies matrices element by element",4],[10,"div_elt","","Divides matrices element by element",4],[10,"drop","","",4],[10,"print_state","","",4],[10,"as_slice_","","Returns a slice into `self`.",4],[10,"to_std_vec","","Converts the matrix to vector from standard library",4],[10,"max_row_wise","","Returns a column vector consisting of maximum over each row",4],[10,"min_row_wise","","Returns a column vector consisting of minimum over each row",4],[10,"max_col_wise","","Returns a row vector consisting of maximum over each column",4],[10,"min_col_wise","","Returns a row vector consisting of minimum over each column",4],[10,"new","","",5],[10,"start_row","","Returns the start row",5],[10,"matrix","","",5],[10,"copy_from","","Copies data from other view",5],[10,"copy_scaled_from","","Copies data from other view with scale factor",5],[10,"stride","","Returns the number of actual memory elements\nper column stored in the memory",5],[10,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",5],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",5],[10,"cell_to_offset","","Maps a cell index to actual offset in the internal buffer",5],[10,"num_rows","","Returns the number of rows in the view",5],[10,"num_cols","","Returns the number of columns in the view",5],[10,"size","","Returns the size of view in an (r, c) tuple",5],[10,"num_cells","","Returns the number of cells in view",5],[10,"get","","Gets an element in the view",5],[10,"set","","Sets an element in the view",5],[10,"to_matrix","","Returns the view as a new matrix.\nCreates a copy of the data.",5],[10,"is_view","","This is a view inside a matrix",5],[10,"min_scalar","","",5],[10,"max_scalar","","",5],[10,"min_scalar_value","","Returns the minimum scalar value",5],[10,"max_scalar_value","","Returns the maximum scalar value",5],[10,"ero_scale_add","","Row scaling by a factor and adding to another row.\nr_i = r_i + k * r_j\nThe j-th row can be outside the view also.\nThis is the row relative to the start of the view.",5],[10,"add","","",5],[10,"fmt","","",5],[10,"to_std_vec","","Converts the view to vector from standard library",5],[10,"min_abs_scalar","","",5],[10,"max_abs_scalar","","",5],[4,"MatrixI8","","A matrix of 8-bit signed integers"],[4,"MatrixI16","","A matrix of 16-bit signed integers"],[4,"MatrixI32","","A matrix of 32-bit signed integers"],[4,"MatrixI64","","A matrix of 64-bit signed integers"],[4,"MatrixU8","","A matrix of 8-bit unsigned integers"],[4,"MatrixU16","","A matrix of 16-bit unsigned integers"],[4,"MatrixU32","","A matrix of 32-bit unsigned integers"],[4,"MatrixU64","","A matrix of 64-bit unsigned integers"],[4,"MatrixUInt","","A matrix of  unsigned integers"],[4,"MatrixF32","","A matrix of 32-bit floating point numbers."],[4,"MatrixF64","","A matrix of 64-bit floating point numbers."],[4,"MatrixC32","","A matrix of 32-bit complex numbers numbers."],[4,"MatrixC64","","A matrix of 64-bit complex numbers numbers."],[6,"Number","","Defines all the traits which a matrix element must support"],[6,"MatrixMul","","\nThis is not yet implemented."],[6,"MatrixType","","Defines the traits which all matrix types must implement."],[9,"num_rows","","Returns the number of rows",6],[9,"num_cols","","Returns the number of columns",6],[9,"size","","Returns the size in an (r, c) tuple",6],[9,"num_cells","","Returns the number of cells in matrix",6],[10,"is_row","","Indicates if the matrix is a row vector",6],[10,"is_col","","Indicates if the matrix is a column vector",6],[10,"is_scalar","","Indicates if the matrix is a scalar actually",6],[10,"is_vector","","Indicates if the matrix is a vector",6],[10,"is_empty","","Indicates if the matrix is empty",6],[10,"is_square","","Indicates if the matrix is square",6],[9,"get","","Gets an element by its row and column number",6],[9,"set","","Sets an element in the view",6],[10,"index_to_cell","","Converts an index to cell address (row, column)",6],[10,"cell_to_index","","Converts a cell address to an index (r, c) to index",6],[6,"MatrixBuffer","","Defines the low level interface to the internal\nmemory buffer of a matrix implementation.  Use it with\ncaution. \n"],[9,"stride","","Returns the number of actual memory elements\nper column",7],[9,"as_ptr","","Returns a constant pointer to matrix's buffer",7],[9,"as_mut_ptr","","Returns a mutable pointer to matrix's buffer",7],[9,"cell_to_offset","","Maps a cell index to actual offset in buffer",7],[6,"Introspection","","These methods help in run time to query\nabout the properties of the type which is implementing\nthe trait. "],[10,"is_view","","Indicates if the matrix is a view",8],[10,"is_matrix","","Indicates if the matrix is a standard matrix",8],[6,"Conversion","","Matrix conversion API"],[9,"to_std_vec","","Converts the matrix to vector from standard library",9],[10,"to_scalar","","Converts the matrix to a scalar",9],[6,"Extraction","","Matrix extraction API"],[10,"row","","Returns the r'th row vector",10],[10,"col","","Returns the c'th column vector",10],[10,"sub_matrix","","Extract a submatrix from the matrix\nrows can easily repeat if the number of requested rows is higher than actual rows\ncols can easily repeat if the number of requested cols is higher than actual cols",10],[6,"MinMax","","Matrix min-max API"],[9,"max_row_wise","","Returns a column vector consisting of maximum over each row",11],[9,"min_row_wise","","Returns a column vector consisting of minimum over each row",11],[9,"max_col_wise","","Returns a row vector consisting of maximum over each column",11],[9,"min_col_wise","","Returns a row vector consisting of minimum over each column",11],[6,"MinMaxAbs","","Matrix min-max with absolute values API"],[9,"min_abs_scalar","","",12],[9,"max_abs_scalar","","",12],[6,"ERO","","Elementary row operations on a matrix"],[10,"ero_switch","","Row switching.",13],[10,"ero_scale","","Row scaling by a factor.",13],[10,"ero_scale_add","","Row scaling by a factor and adding to another row.\nr_i = r_i + k * r_j",13],[6,"Updates","","Various kind of updates to the matrix"],[10,"set_diagonal","","",14],[10,"set_row","","Sets all the entries on a row to a particular value",14],[10,"set_col","","Sets all the entries on a column to a particular value",14],[10,"set_block","","Sets all the entries on a block to a particular value",14],[10,"fmt","","",0],[10,"new","","Creates a new iterator object",1],[10,"next","","",1],[10,"new","","Creates a new iterator object",2],[10,"next","","",2],[10,"new","","Creates a new iterator object",3],[10,"next","","",3],[10,"from_scalar","","Constructs a scalar matrix",4],[10,"new","","Constructs a new matrix of given size (uninitialized).",4],[10,"zeros","","Constructs a matrix of all zeros",4],[10,"ones","","Constructs a matrix of all ones.",4],[10,"identity","","Constructs an identity matrix",4],[10,"from_slice_cw","","Constructs a matrix from a slice of data reading\ndata in column wise order.\n    ",4],[10,"from_slice_rw","","Constructs a matrix from a slice of data reading data in row wise order.",4],[10,"from_iter_cw","","",4],[10,"from_iter_rw","","Builds a matrix from an iterator reading numbers in a\nrow-wise order",4],[10,"diag_from_vec","","Construct a diagonal matrix from a vector",4],[10,"unit_vector","","Constructs a unit vector\n(1, 0, 0), (0, 1, 0), (0, 0, 1), etc.",4],[10,"num_rows","","Returns the number of rows in the matrix",4],[10,"num_cols","","Returns the number of columns in the matrix",4],[10,"size","","Returns the size of matrix in an (r, c) tuple",4],[10,"num_cells","","Returns the number of cells in matrix",4],[10,"get","","",4],[10,"set","","",4],[10,"is_matrix","","This is a standard matrix object",4],[10,"stride","","Returns the number of actual memory elements\nper column stored in the memory",4],[10,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",4],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",4],[10,"cell_to_offset","","Maps a cell index to actual offset in the internal buffer",4],[10,"capacity","","Returns the capacity of the matrix\ni.e. the number of elements it can hold",4],[10,"is_identity","","Returns if the matrix is an identity matrix",4],[10,"is_diagonal","","Returns if the matrix is a diagonal matrix",4],[10,"is_lt","","Returns if the matrix is lower triangular",4],[10,"is_ut","","Returns if the matrix is upper triangular",4],[10,"is_triangular","","Returns if the matrix is triangular",4],[10,"row_iter","","Returns an iterator over a specific row of matrix",4],[10,"col_iter","","Returns an iterator over a specific column of the matrix",4],[10,"cell_iter","","Returns an iterator over all cells  of the matrix",4],[10,"repeat_matrix","","",4],[10,"diagonal_vector","","Extracts the primary diagonal from the matrix as a vector",4],[10,"diagonal_matrix","","Extracts the primary diagonal from the matrix as a matrix of same size",4],[10,"ut","","Returns the upper triangular part of the matrix as a new matrix",4],[10,"lt","","Returns the lower triangular part of the matrix as a new matrix",4],[10,"add_scalar","","Add the matrix by a scalar\nReturns a new matrix",4],[10,"mul_scalar","","Multiply the matrix by a scalar\nReturns a new matrix",4],[10,"div_scalar","","Divide the matrix by a scalar\nReturns a new matrix",4],[10,"pow","","Computes power of a matrix\nReturns a new matrix",4],[10,"transpose","","Computes the transpose of a matrix.\nThis doesn't involve complex conjugation.\nReturns a new matrix",4],[10,"unary_minus","","Computes the unary minus of a matrix",4],[10,"inner_prod","","Inner product or dot product of two vectors\nBoth must be column vectors\nBoth must have same length\nresult = a' * b.",4],[10,"outer_prod","","Outer product of two vectors\nBoth must be column vectors\nBoth must have same length\nresult = a * b'.",4],[10,"append_columns","","Appends one or more columns at the end of matrix",4],[10,"prepend_columns","","Prepends one or more columns at the beginning of matrix",4],[10,"insert_columns","","Inserts columns at the specified location",4],[10,"append_rows","","Appends one or more rows at the bottom of matrix",4],[10,"prepend_rows","","Prepends one or more rows at the top of matrix",4],[10,"insert_rows","","Inserts rows at the specified location",4],[10,"view","","Creates a view on the matrix",4],[10,"min_scalar","","",4],[10,"max_scalar","","",4],[10,"min_scalar_value","","Returns the minimum scalar value",4],[10,"max_scalar_value","","Returns the maximum scalar value",4],[10,"min_abs_scalar","","",4],[10,"max_abs_scalar","","",4],[10,"min_abs_scalar_value","","Returns the absolute minimum scalar value",4],[10,"max_abs_scalar_value","","Returns the absolute maximum scalar value",4],[10,"is_logical","","Returns if an integer matrix is a logical matrix",4],[10,"is_finite","","Returns a matrix showing all the cells which are finite",4],[10,"is_infinite","","Returns a matrix showing all the cells which are infinite",4],[10,"det","","Returns determinant of the matrix",4],[10,"index","","",4],[10,"clone","","Creates a clone of the matrix",4],[10,"fmt","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"mul","","",4],[10,"eq","","",4],[10,"mul_elt","","Multiplies matrices element by element",4],[10,"div_elt","","Divides matrices element by element",4],[10,"drop","","",4],[10,"print_state","","",4],[10,"as_slice_","","Returns a slice into `self`.",4],[10,"to_std_vec","","Converts the matrix to vector from standard library",4],[10,"max_row_wise","","Returns a column vector consisting of maximum over each row",4],[10,"min_row_wise","","Returns a column vector consisting of minimum over each row",4],[10,"max_col_wise","","Returns a row vector consisting of maximum over each column",4],[10,"min_col_wise","","Returns a row vector consisting of minimum over each column",4],[10,"new","","",5],[10,"start_row","","Returns the start row",5],[10,"matrix","","",5],[10,"copy_from","","Copies data from other view",5],[10,"copy_scaled_from","","Copies data from other view with scale factor",5],[10,"stride","","Returns the number of actual memory elements\nper column stored in the memory",5],[10,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",5],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",5],[10,"cell_to_offset","","Maps a cell index to actual offset in the internal buffer",5],[10,"num_rows","","Returns the number of rows in the view",5],[10,"num_cols","","Returns the number of columns in the view",5],[10,"size","","Returns the size of view in an (r, c) tuple",5],[10,"num_cells","","Returns the number of cells in view",5],[10,"get","","Gets an element in the view",5],[10,"set","","Sets an element in the view",5],[10,"to_matrix","","Returns the view as a new matrix.\nCreates a copy of the data.",5],[10,"is_view","","This is a view inside a matrix",5],[10,"min_scalar","","",5],[10,"max_scalar","","",5],[10,"min_scalar_value","","Returns the minimum scalar value",5],[10,"max_scalar_value","","Returns the maximum scalar value",5],[10,"ero_scale_add","","Row scaling by a factor and adding to another row.\nr_i = r_i + k * r_j\nThe j-th row can be outside the view also.\nThis is the row relative to the start of the view.",5],[10,"add","","",5],[10,"fmt","","",5],[10,"to_std_vec","","Converts the view to vector from standard library",5],[10,"min_abs_scalar","","",5],[10,"max_abs_scalar","","",5],[0,"linalg","scirust","Linear algebra algorithms\n    "],[1,"GaussElimination","scirust::linalg","A Gauss elimination problem specification"],[11,"a","","The matrix A of AX = B",15],[11,"b","","The matrix B of AX = B",15],[1,"LinearSystemValidator","","Validates the solution of linear system"],[11,"a","","The matrix A of AX = B",16],[11,"x","","The matrix X of AX = B",16],[11,"b","","The matrix B of AX = B",16],[11,"d","","The difference matrix",16],[1,"LUPartialPivot","","LU factorization with partial\npivoting problem setup: PA  = LU\n"],[11,"a","","The matrix whose LU factorization is to be computed",17],[11,"p","","The corresponding permutation matrix",17],[11,"l","","The corresponding lower triangular matrix",17],[11,"u","","The corresponding upper triangular matrix",17],[2,"LinearSystemError","","Errors in algorithms related to linear systems"],[12,"NoSolution","","There is no solution to the system of equations",18],[12,"InfiniteSolutions","","There are infinite solutions to the system of equations.",18],[3,"lt_solve","","Implements the forward substitution algorithm for\nsolving a lower triangular linear system. L X = B\n"],[3,"ut_solve","","Implements the back substitution algorithm for\nsolving a upper triangular linear system. L X = B\n"],[3,"ldu_solve","","Implements the algorithm for solving the equation LDU X = B\nwhere L, D, U are known (LDU decomposition of A), B is known and X is unknown.\nUses a combination of forward and backward substitutions. \n"],[3,"det","","Returns the determinant of a matrix."],[3,"lu","","Wrapper function to perform LU factorization"],[3,"lup","",""],[3,"is_singular_lt","","Indicates if a lower triangular matrix is singular or not."],[3,"is_singular_ut","","Indicates if a upper triangular matrix is singular or not."],[3,"is_singular_triangular","","Indicates if a triangular matrix is singular or not."],[3,"is_singular_diagonal","","Indicates if a diagonal matrix is singular or not."],[3,"has_zero_on_diagonal","","Checks if any entry on the main diagonal is zero"],[10,"new","","Setup of a new Gauss elimination problem.",15],[10,"solve","","Carries out the procedure of Gauss elimination.",15],[10,"new","","Setup of a new Gauss elimination problem.",16],[10,"max_abs_scalar_value","","",16],[10,"is_max_abs_val_below_threshold","","Validates the equality Ax = b subject to maximum\nabsolute error being less than a specified threshold.",16],[10,"print","","Printing for debugging",16],[10,"new","","Setup of a new LU factorization with partial pivot problem",17],[10,"solve","","Performs LU factorization with partial pivoting",17],[10,"max_abs_diff","","Finds the maximum absolute entry in pa - lu",17],[10,"print","","",17],[10,"to_string","","Converts enum values to string representation",18],[10,"fmt","","Formatting of enum values",18],[10,"new","","Setup of a new Gauss elimination problem.",15],[10,"solve","","Carries out the procedure of Gauss elimination.",15],[10,"new","","Setup of a new Gauss elimination problem.",16],[10,"max_abs_scalar_value","","",16],[10,"is_max_abs_val_below_threshold","","Validates the equality Ax = b subject to maximum\nabsolute error being less than a specified threshold.",16],[10,"print","","Printing for debugging",16],[10,"new","","Setup of a new LU factorization with partial pivot problem",17],[10,"solve","","Performs LU factorization with partial pivoting",17],[10,"max_abs_diff","","Finds the maximum absolute entry in pa - lu",17],[10,"print","","",17],[10,"to_string","","Converts enum values to string representation",18],[10,"fmt","","Formatting of enum values",18],[0,"stat","scirust","Statistics\n    "],[0,"opt","","Optimization\n    "],[0,"lp","scirust::opt","Linear programming\n    "],[0,"ls","","Least squares\n    "],[0,"cvx","","Convex optimization\n    "],[0,"signal","scirust","Signal processing\n    "],[1,"Impulse","scirust::signal",""],[3,"impulse_f64","",""],[3,"impulse_vector","",""],[3,"impulse_vector_f64","",""],[10,"new","","",19],[10,"next","","",19],[10,"new","","",19],[10,"next","","",19],[0,"image","scirust","Image processing\n"],[0,"audio","","Audio signal processing\n"],[0,"dx","","Data exchange"],[0,"external","","External code."],[0,"complex","scirust::external","Complex numbers."],[1,"Complex","scirust::external::complex","A complex number in Cartesian form."],[11,"re","","Real portion of the complex number",20],[11,"im","","Imaginary portion of the complex number",20],[4,"Complex32","",""],[4,"Complex64","",""],[10,"hash","","",20],[10,"clone","","",20],[10,"eq","","",20],[10,"ne","","",20],[10,"new","","Create a new Complex",20],[10,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",20],[10,"conj","","Returns the complex conjugate. i.e. `re - i im`",20],[10,"scale","","Multiplies `self` by the scalar `t`.",20],[10,"unscale","","Divides `self` by the scalar `t`.",20],[10,"inv","","Returns `1/self`",20],[10,"norm","","Calculate |self|",20],[10,"arg","","Calculate the principal Arg of self.",20],[10,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",20],[10,"from_polar","","Convert a polar representation into a complex number.",20],[10,"add","","",20],[10,"sub","","",20],[10,"mul","","",20],[10,"div","","",20],[10,"neg","","",20],[10,"zero","","",20],[10,"is_zero","","",20],[10,"one","","",20],[10,"fmt","","",20],[10,"to_str_radix","","",20],[10,"rem","","",20],[0,"testdata","scirust",""],[0,"matrix","scirust::testdata",""],[3,"square_0","scirust::testdata::matrix","Matrix properties:\n \ndeterminant = -13\n"],[3,"square_1","","Matrix properties:\n \ndeterminant = 6\n"],[10,"is_row","scirust::matrix","Indicates if the matrix is a row vector",6],[10,"is_col","","Indicates if the matrix is a column vector",6],[10,"is_scalar","","Indicates if the matrix is a scalar actually",6],[10,"is_vector","","Indicates if the matrix is a vector",6],[10,"is_empty","","Indicates if the matrix is empty",6],[10,"is_square","","Indicates if the matrix is square",6],[10,"index_to_cell","","Converts an index to cell address (row, column)",6],[10,"cell_to_index","","Converts a cell address to an index (r, c) to index",6],[10,"is_view","","Indicates if the matrix is a view",8],[10,"is_matrix","","Indicates if the matrix is a standard matrix",8],[10,"to_scalar","","Converts the matrix to a scalar",9],[10,"row","","Returns the r'th row vector",10],[10,"col","","Returns the c'th column vector",10],[10,"sub_matrix","","Extract a submatrix from the matrix\nrows can easily repeat if the number of requested rows is higher than actual rows\ncols can easily repeat if the number of requested cols is higher than actual cols",10],[10,"ero_switch","","Row switching.",13],[10,"ero_scale","","Row scaling by a factor.",13],[10,"ero_scale_add","","Row scaling by a factor and adding to another row.\nr_i = r_i + k * r_j",13],[10,"set_diagonal","","",14],[10,"set_row","","Sets all the entries on a row to a particular value",14],[10,"set_col","","Sets all the entries on a column to a particular value",14],[10,"set_block","","Sets all the entries on a block to a particular value",14]],"paths":[[2,"MatrixError"],[1,"RowIterator"],[1,"ColIterator"],[1,"CellIterator"],[1,"Matrix"],[1,"MatrixView"],[6,"MatrixType"],[6,"MatrixBuffer"],[6,"Introspection"],[6,"Conversion"],[6,"Extraction"],[6,"MinMax"],[6,"MinMaxAbs"],[6,"ERO"],[6,"Updates"],[1,"GaussElimination"],[1,"LinearSystemValidator"],[1,"LUPartialPivot"],[2,"LinearSystemError"],[1,"Impulse"],[1,"Complex"]]};
initSearch(searchIndex);
