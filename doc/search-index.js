var searchIndex = {};
searchIndex['scirust'] = {"items":[[0,"","scirust","A generics based scientific computing library for Rust",null,null],[0,"error","","Defines errors related to SciRust library",null,null],[4,"SRError","scirust::error","Enum for errors related to SciRust library",null,null],[13,"EmptyMatrix","","The matrix is empty",0,null],[13,"DimensionsMismatch","","The dimensions of two matrices mismatch",0,null],[13,"RowsMismatch","","Number of rows don't match",0,null],[13,"ColsMismatch","","Number of columns don't match",0,null],[13,"IsNotSquareMatrix","","The matrix is not a square matrix",0,null],[13,"IsNotAVector","","The matrix is not a vector",0,null],[13,"IsNotAColVector","","",0,null],[13,"IsNotARowVector","","",0,null],[13,"IsNotFullRankMatrix","","Indicates that a matrix is not full rank",0,null],[13,"IsFullRankMatrix","","Indicates that the matrix is full rank",0,null],[13,"IsSingular","","The matrix is singular",0,null],[13,"IsNonSingular","","The matrix is invertible (non-singular)",0,null],[13,"IsPositiveDefinite","","The matrix is positive definite",0,null],[13,"IsPositiveSemiDefinite","","The matrix is positive semi definite",0,null],[13,"IsNegativeDefinite","","The matrix is negative definite",0,null],[13,"IsNegativeSemiDefinite","","The matrix is negative semi definite",0,null],[13,"IsNonDefinite","","The matrix is non-definite",0,null],[13,"LRDimensionMismatch","","The dimensions of left and right hand side don't match",0,null],[13,"NoSolution","","There is no solution to the system of equations",0,null],[13,"InfiniteSolutions","","There are infinite solutions to the system of equations.",0,null],[13,"DivideByZero","","",0,null],[13,"IsNotPowerOfTwo","","The number is not a power of two",0,null],[6,"SRResult","","A convenient typedef of the return value of SciRust API\nwhenever applicable.",null,null],[11,"clone","","",0,{"inputs":[{"name":"srerror"}],"output":{"name":"srerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"srerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","Converts enum values to string representation",0,{"inputs":[{"name":"srerror"}],"output":{"name":"string"}}],[11,"fmt","","",0,{"inputs":[{"name":"srerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"algebra","scirust","Algebraic structures",null,null],[0,"ops","scirust::algebra","Defines some operators.",null,null],[8,"Recip","scirust::algebra::ops","A type for which computing the reciprocal is supported.\nSupported types include f32, f64, etc.. ",null,null],[16,"Output","","The resulting type after computing 1 / x.",1,null],[10,"recip","","The method for the computing 1 / x.",1,{"inputs":[{"name":"recip"}],"output":{"name":"output"}}],[8,"Division","","Marker interface for restricting division to only those types which\nsupport exact division",null,null],[0,"structure","scirust::algebra","Defines generic traits for algebraic structures on which\nSciRust library works.",null,null],[5,"is_magma_base","scirust::algebra::structure","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_magma_add_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_magma_add","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_magma_mul_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_magma_mul","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_quasigroup_add_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_quasigroup_add","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_quasigroup_mul_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_quasigroup_mul","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_semigroup_add_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_semigroup_add","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_semigroup_mul_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_semigroup_mul","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_loop_add_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_loop_add","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_loop_mul_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_loop_mul","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_monoid_add_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_monoid_add","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_monoid_mul_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_monoid_mul","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_group_add_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_group_add","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_group_mul_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_group_mul","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_commutative_group_add_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_commutative_group_add","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_commutative_group_mul_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_commutative_group_mul","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_ring_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_ring","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_commutative_ring_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_commutative_ring","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_integral_domain_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_integral_domain","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_field_partial","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"is_field","","",null,{"inputs":[{"name":"t"}],"output":null}],[0,"magma","","Defines the magma algebraic structure.",null,null],[8,"MagmaBase","scirust::algebra::structure::magma","Defines basic requirements for all types implementing\nthe algebraic traits defined  in SciRust",null,null],[8,"MagmaAddPartial","","Magma with an addition operation with partial equivalence",null,null],[8,"MagmaAdd","","Magma with an addition operation with full equivalence",null,null],[8,"MagmaMulPartial","","Magma with a multiplication operation with partial equivalence",null,null],[8,"MagmaMul","","Magma with a multiplication operation with full equivalence",null,null],[0,"quasigroup","scirust::algebra::structure","Defines the quasi-group algebraic structure.",null,null],[8,"QuasiGroupAddPartial","scirust::algebra::structure::quasigroup","Quasigroup with an addition operation with partial equivalence",null,null],[8,"QuasiGroupAdd","","Quasigroup with an addition operation with full equivalence",null,null],[8,"QuasiGroupMulPartial","","Quasigroup with a multiplication operation with partial equivalence",null,null],[8,"QuasiGroupMul","","Quasigroup with a multiplication operation with full equivalence",null,null],[0,"semigroup","scirust::algebra::structure","Defines the semigroup algebraic structure.",null,null],[8,"SemiGroupAddPartial","scirust::algebra::structure::semigroup","Semigroup with an addition operation with partial equivalence",null,null],[11,"prop_is_associative","","",2,{"inputs":[{"name":"semigroupaddpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"SemiGroupAdd","","Semigroup with an addition operation with full equivalence",null,null],[11,"prop_is_associative","","",3,{"inputs":[{"name":"semigroupadd"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"SemiGroupMulPartial","","Semigroup with a multiplication operation with partial equivalence",null,null],[11,"prop_is_associative","","",4,{"inputs":[{"name":"semigroupmulpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"SemiGroupMul","","Semigroup with a multiplication operation with full equivalence",null,null],[0,"loop_","scirust::algebra::structure","Defines the loop algebraic structure.",null,null],[8,"LoopAddPartial","scirust::algebra::structure::loop_","",null,null],[8,"LoopAdd","","",null,null],[8,"LoopMulPartial","","",null,null],[8,"LoopMul","","",null,null],[0,"monoid","scirust::algebra::structure","Defines the monoid algebraic structure.",null,null],[8,"MonoidAddPartial","scirust::algebra::structure::monoid","Monoid with an addition operation with partial equivalence",null,null],[8,"MonoidAdd","","Monoid with an addition operation with full equivalence",null,null],[8,"MonoidMulPartial","","Monoid with a multiplication operation with partial equivalence",null,null],[8,"MonoidMul","","Monoid with a multiplication operation with full equivalence",null,null],[8,"CommutativeMonoidAddPartial","","Commutative monoid with an addition operation with partial equivalence",null,null],[11,"prop_is_commutative","","Returns `true` if the addition operator is approximately commutative for\nthe given argument tuple.",5,{"inputs":[{"name":"commutativemonoidaddpartial"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"CommutativeMonoidAdd","","Commutative monoid with an addition operation with full equivalence",null,null],[11,"prop_is_commutative","","Returns `true` if the addition operator is approximately commutative for\nthe given argument tuple.",6,{"inputs":[{"name":"commutativemonoidadd"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"CommutativeMonoidMulPartial","","Commutative monoid with a multiplication operation with partial equivalence",null,null],[11,"prop_is_commutative","","Returns `true` if the multiplication operator is approximately commutative for\nthe given argument tuple.",7,{"inputs":[{"name":"commutativemonoidmulpartial"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"CommutativeMonoidMul","","Commutative monoid with a multiplication operation with full equivalence",null,null],[11,"prop_is_commutative","","Returns `true` if the multiplication operator is approximately commutative for\nthe given argument tuple.",8,{"inputs":[{"name":"commutativemonoidmul"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"group","scirust::algebra::structure","Defines the group algebraic structure.",null,null],[8,"GroupAddPartial","scirust::algebra::structure::group","Group with an addition operation with partial equivalence",null,null],[8,"GroupAdd","","Group with an addition operation with full equivalence",null,null],[8,"GroupMulPartial","","Group with a multiplication operation with partial equivalence",null,null],[8,"GroupMul","","Group with a multiplication operation with full equivalence",null,null],[8,"CommutativeGroupAddPartial","","Commutative group with an addition operation with partial equivalence",null,null],[11,"prop_is_commutative","","Returns `true` if the addition operator is approximately commutative for\nthe given argument tuple.",9,{"inputs":[{"name":"commutativegroupaddpartial"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"CommutativeGroupAdd","","Commutative group with an addition operation with full equivalence",null,null],[11,"prop_is_commutative","","Returns `true` if the addition operator is approximately commutative for\nthe given argument tuple.",10,{"inputs":[{"name":"commutativegroupadd"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"CommutativeGroupMulPartial","","Commutative group with a multiplication operation with partial equivalence",null,null],[11,"prop_is_commutative","","Returns `true` if the multiplication operator is approximately commutative for\nthe given argument tuple.",11,{"inputs":[{"name":"commutativegroupmulpartial"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"CommutativeGroupMul","","Commutative group with a multiplication operation with full equivalence",null,null],[11,"prop_is_commutative","","Returns `true` if the multiplication operator is approximately commutative for\nthe given argument tuple.",12,{"inputs":[{"name":"commutativegroupmul"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"ring","scirust::algebra::structure","Defines the ring algebraic structure.",null,null],[8,"RingPartial","scirust::algebra::structure::ring","Ring with partial equivalence",null,null],[11,"prop_addition_is_associative","","",13,{"inputs":[{"name":"ringpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_additive_identity","","",13,{"inputs":[{"name":"ringpartial"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_additive_inverse","","",13,{"inputs":[{"name":"ringpartial"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_addition_is_commutative","","",13,{"inputs":[{"name":"ringpartial"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplication_is_associative","","",13,{"inputs":[{"name":"ringpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplicative_identity","","",13,{"inputs":[{"name":"ringpartial"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_is_distributive","","",13,{"inputs":[{"name":"ringpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"check_all_properties","","",13,{"inputs":[{"name":"ringpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Ring","","Ring with full equivalence",null,null],[11,"check_all_properties","","",14,{"inputs":[{"name":"ring"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"commutative_ring","scirust::algebra::structure","Defines the commutative ring algebraic structure.",null,null],[8,"CommutativeRingPartial","scirust::algebra::structure::commutative_ring","Commutative ring with partial equivalence",null,null],[11,"prop_multiplication_is_commutative","","",15,{"inputs":[{"name":"commutativeringpartial"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"check_all_properties","","",15,{"inputs":[{"name":"commutativeringpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"CommutativeRing","","Commutative ring with full equivalence",null,null],[11,"check_all_properties","","",16,{"inputs":[{"name":"commutativering"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"integral_domain","scirust::algebra::structure","Defines the integral domain algebraic structure.",null,null],[8,"IntegralDomainPartial","scirust::algebra::structure::integral_domain","Marker trait for integral domains with partial equivalence",null,null],[8,"IntegralDomain","","Marker trait for integral domains with full equivalence",null,null],[0,"field","scirust::algebra::structure","Defines the field algebraic structure.",null,null],[8,"FieldPartial","scirust::algebra::structure::field","Marker trait for fields with partial equivalence",null,null],[11,"prop_addition_is_associative","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplication_is_associative","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_addition_is_commutative","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplication_is_commutative","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_additive_identity","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplicative_identity","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_distinct_zero_one","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_additive_inverse","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplicative_inverse","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_is_distributive","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"check_all_properties","","",17,{"inputs":[{"name":"fieldpartial"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Field","","Marker trait for fields with full equivalence",null,null],[11,"prop_addition_is_associative","","",18,{"inputs":[{"name":"field"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplication_is_associative","","",18,{"inputs":[{"name":"field"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_addition_is_commutative","","",18,{"inputs":[{"name":"field"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplication_is_commutative","","",18,{"inputs":[{"name":"field"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_additive_identity","","",18,{"inputs":[{"name":"field"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplicative_identity","","",18,{"inputs":[{"name":"field"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_distinct_zero_one","","",18,{"inputs":[{"name":"field"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_additive_inverse","","",18,{"inputs":[{"name":"field"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_multiplicative_inverse","","",18,{"inputs":[{"name":"field"},{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_is_distributive","","",18,{"inputs":[{"name":"field"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"check_all_properties","","",18,{"inputs":[{"name":"field"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"complex","scirust::algebra","Support for algebraic structure traits on complex numbers.",null,null],[11,"recip","num::complex","",19,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[0,"external","scirust","External code.",null,null],[0,"discrete","","Discrete mathematics",null,null],[5,"mod_n","scirust::discrete","",null,{"inputs":[{"name":"isize"},{"name":"isize"}],"output":{"name":"usize"}}],[0,"permutations","","Routines related to permutations",null,null],[5,"is_permutation","scirust::discrete::permutations","Tells whether a vector is a permutation or not.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[5,"inverse_permutation","","Finds the inverse permutation",null,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[0,"matrix","scirust","Fundamental matrix structures",null,null],[0,"constructors","scirust::matrix","Provides functions to create different types of matrices.",null,null],[5,"hadamard","scirust::matrix::constructors","Returns a Hadamard matrix of size n x n",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"hilbert","","Returns a Hilbert matrix.",null,{"inputs":[{"name":"usize"}],"output":{"name":"matrixf64"}}],[5,"from_range_cw","","Returns a matrix whose entries are picked up from\na range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix"}}],[5,"from_range_cw_f64","","Returns a 64-bit floating point matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f64"},{"name":"f64"}],"output":{"name":"matrixf64"}}],[5,"from_range_cw_i8","","Returns an 8-bit signed integer matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i8"},{"name":"i8"}],"output":{"name":"matrixi8"}}],[5,"from_range_cw_i16","","Returns an 16-bit signed integer matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i16"},{"name":"i16"}],"output":{"name":"matrixi16"}}],[5,"from_range_cw_i32","","Returns an 32-bit signed integer matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"i32"}],"output":{"name":"matrixi32"}}],[5,"from_range_cw_i64","","Returns an 64-bit signed integer matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i64"},{"name":"i64"}],"output":{"name":"matrixi64"}}],[5,"from_range_cw_u8","","Returns an 8-bit unsigned integer matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u8"},{"name":"u8"}],"output":{"name":"matrixu8"}}],[5,"from_range_cw_u16","","Returns an 16-bit unsigned integer matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u16"},{"name":"u16"}],"output":{"name":"matrixu16"}}],[5,"from_range_cw_u32","","Returns an 32-bit unsigned integer matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u32"},{"name":"u32"}],"output":{"name":"matrixu32"}}],[5,"from_range_cw_u64","","Returns an 64-bit unsigned integer matrix whose entries are\npicked up from a range in column wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u64"},{"name":"u64"}],"output":{"name":"matrixu64"}}],[5,"from_range_rw","","Returns a matrix whose entries are picked up from\na range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"t"},{"name":"t"}],"output":{"name":"matrix"}}],[5,"from_range_rw_i8","","Returns an 8-bit signed integer matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i8"},{"name":"i8"}],"output":{"name":"matrixi8"}}],[5,"from_range_rw_i16","","Returns an 16-bit signed integer matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i16"},{"name":"i16"}],"output":{"name":"matrixi16"}}],[5,"from_range_rw_i32","","Returns an 32-bit signed integer matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"i32"}],"output":{"name":"matrixi32"}}],[5,"from_range_rw_i64","","Returns an 64-bit signed integer matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i64"},{"name":"i64"}],"output":{"name":"matrixi64"}}],[5,"from_range_rw_u8","","Returns an 8-bit unsigned integer matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u8"},{"name":"u8"}],"output":{"name":"matrixu8"}}],[5,"from_range_rw_u16","","Returns an 16-bit unsigned integer matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u16"},{"name":"u16"}],"output":{"name":"matrixu16"}}],[5,"from_range_rw_u32","","Returns an 32-bit unsigned integer matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u32"},{"name":"u32"}],"output":{"name":"matrixu32"}}],[5,"from_range_rw_u64","","Returns an 64-bit unsigned integer matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u64"},{"name":"u64"}],"output":{"name":"matrixu64"}}],[5,"from_range_rw_f64","","Returns a 64-bit floating point matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f64"},{"name":"f64"}],"output":{"name":"matrixf64"}}],[5,"from_range_rw_f32","","Returns a 32-bit floating point matrix whose entries are\npicked up from a range in row wise order.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f32"},{"name":"f32"}],"output":{"name":"matrixf32"}}],[5,"matrix_cw_u8","","Returns an 8-bit unsigned integer matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_u16","","Returns a 16-bit unsigned integer matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_u32","","Returns a 32-bit unsigned integer matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_u64","","Returns a 64-bit unsigned integer matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_i8","","Returns an 8-bit signed integer matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_i16","","Returns a 16-bit signed integer matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_i32","","Returns a 32-bit signed integer matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_i64","","Returns a 64-bit signed integer matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_f32","","Returns a 32-bit float matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_f64","","Returns a 64-bit float matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_c32","","Returns a 32-bit complex matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_cw_c64","","Returns a 64-bit complex matrix whose entries are\npicked up from a slice in column wise order.",null,null],[5,"matrix_rw_u8","","Returns an 8-bit unsigned integer matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_u16","","Returns a 16-bit unsigned integer matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_u32","","Returns a 32-bit unsigned integer matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_u64","","Returns a 64-bit unsigned integer matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_i8","","Returns an 8-bit signed integer matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_i16","","Returns a 16-bit signed integer matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_i32","","Returns a 32-bit signed integer matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_i64","","Returns a 64-bit signed integer matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_f32","","Returns a 32-bit float matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"matrix_rw_f64","","Returns a 64-bit float matrix whose entries are\npicked up from a slice in row wise order.",null,null],[5,"col_vector","","Returns a column vector with entries from a slice.",null,null],[5,"col_vector_from_iter","","Returns a column vector with entries from an iterator.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"matrix"}}],[5,"vector_u8","","Returns a 8-bit unsigned int column vector with entries from a slice.",null,null],[5,"vector_u16","","Returns a 16-bit unsigned int column vector with entries from a slice.",null,null],[5,"vector_u32","","Returns a 32-bit unsigned int column vector with entries from a slice.",null,null],[5,"vector_u64","","Returns a 64-bit unsigned int column vector with entries from a slice.",null,null],[5,"vector_i8","","Returns an 8-bit signed int column vector with entries from a slice.",null,null],[5,"vector_i16","","Returns a 16-bit signed int column vector with entries from a slice.",null,null],[5,"vector_i32","","Returns a 32-bit signed int column vector with entries from a slice.",null,null],[5,"vector_i64","","Returns a 64-bit signed int column vector with entries from a slice.",null,null],[5,"vector_f32","","Returns a 32-bit float column vector with entries from a slice.",null,null],[5,"vector_f64","","Returns a 64-bit float column vector with entries from a slice.",null,null],[5,"ero_switch","","Returns elementary matrix which can\nexchange rows i and j\non left multiplication.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[5,"ero_scale","","Returns elementary matrix which can scale\na particular row by a factor on left multiplication.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":{"name":"matrix"}}],[5,"ero_scale_add","","Returns elementary matrix which can scale\na particular row by a factor and add it to\nanother row\non left multiplication.\nr_i = r_i + k * r_j",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":{"name":"matrix"}}],[0,"iter","scirust::matrix","",null,null],[3,"RowIterator","scirust::matrix::iter","An iterator over the elements of a matrix in a row",null,null],[3,"ColIterator","","An iterator over the elements of a matrix in a column",null,null],[3,"CellIterator","","A column major iterator over the elements of a matrix",null,null],[3,"DiagIterator","","An iterator over the major diagonal of a matrix.",null,null],[11,"new","","Creates a new iterator object",20,null],[11,"next","","",20,{"inputs":[{"name":"rowiterator"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator object",21,null],[11,"next","","",21,{"inputs":[{"name":"coliterator"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator object",22,null],[11,"next","","",22,{"inputs":[{"name":"celliterator"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator object",23,null],[11,"next","","",23,{"inputs":[{"name":"diagiterator"}],"output":{"name":"option"}}],[0,"matrix","scirust::matrix","Provides the basic Matrix data type",null,null],[3,"Matrix","scirust::matrix::matrix","",null,null],[6,"MatrixI8","","A matrix of 8-bit signed integers",null,null],[6,"MatrixI16","","A matrix of 16-bit signed integers",null,null],[6,"MatrixI32","","A matrix of 32-bit signed integers",null,null],[6,"MatrixI64","","A matrix of 64-bit signed integers",null,null],[6,"MatrixU8","","A matrix of 8-bit unsigned integers",null,null],[6,"MatrixU16","","A matrix of 16-bit unsigned integers",null,null],[6,"MatrixU32","","A matrix of 32-bit unsigned integers",null,null],[6,"MatrixU64","","A matrix of 64-bit unsigned integers",null,null],[6,"MatrixF32","","A matrix of 32-bit floating point numbers.",null,null],[6,"MatrixF64","","A matrix of 64-bit floating point numbers.",null,null],[6,"MatrixC32","","A matrix of 32-bit complex numbers numbers.",null,null],[6,"MatrixC64","","A matrix of 64-bit complex numbers numbers.",null,null],[11,"new","","Constructs a new matrix of given size (uninitialized).",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_scalar","","Constructs a scalar matrix",24,{"inputs":[{"name":"matrix"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"zeros","","Constructs a matrix of all zeros",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_slice_cw","","Constructs a matrix from a slice of data reading\ndata in column wise order.",24,null],[11,"from_slice_rw","","Constructs a matrix from a slice of data reading data in row wise order.",24,null],[11,"from_iter_cw","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"},{"name":"a"}],"output":{"name":"matrix"}}],[11,"from_iter_rw","","Builds a matrix from an iterator reading numbers in a\nrow-wise order",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"},{"name":"a"}],"output":{"name":"matrix"}}],[11,"diag_from_vec","","Construct a diagonal matrix from a vector",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"ones","","Constructs a matrix of all ones.",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"identity","","Constructs an identity matrix",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"unit_vector","","Constructs a unit vector\n(1, 0, 0), (0, 1, 0), (0, 0, 1), etc.",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"num_rows","","Returns the number of rows in the matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"usize"}}],[11,"num_cols","","Returns the number of columns in the matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"usize"}}],[11,"size","","Returns the size of matrix in an (r, c) tuple",24,null],[11,"num_cells","","Returns the number of cells in matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"set","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"is_identity","","Returns if the matrix is an identity matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"is_diagonal","","Returns if the matrix is a diagonal matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns if the matrix is lower triangular",24,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"is_ut","","Returns if the matrix is upper triangular",24,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"is_symmetric","","Returns if the matrix is symmetric",24,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"trace","","Returns the trace of the matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[11,"is_standard_matrix_type","","This is a standard matrix object",24,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"stride","","Returns the number of actual memory elements\nper column stored in the memory",24,{"inputs":[{"name":"matrix"}],"output":{"name":"usize"}}],[11,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",24,null],[11,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",24,null],[11,"cell_to_offset","","Maps a cell index to actual offset in the internal buffer",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"capacity","","Returns the capacity of the matrix\ni.e. the number of elements it can hold",24,{"inputs":[{"name":"matrix"}],"output":{"name":"usize"}}],[11,"reshape","","Reshapes the matrix",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"row_iter","","Returns an iterator over a specific row of matrix",24,{"inputs":[{"name":"matrix"},{"name":"isize"}],"output":{"name":"rowiterator"}}],[11,"col_iter","","Returns an iterator over a specific column of the matrix",24,{"inputs":[{"name":"matrix"},{"name":"isize"}],"output":{"name":"coliterator"}}],[11,"cell_iter","","Returns an iterator over all cells  of the matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"celliterator"}}],[11,"diagonal_iter","","Provide the main diagonal elements",24,{"inputs":[{"name":"matrix"}],"output":{"name":"diagiterator"}}],[11,"repeat_matrix","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"diagonal_vector","","Extracts the primary diagonal from the matrix as a vector",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"diagonal_matrix","","Extracts the primary diagonal from the matrix as a matrix of same size",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"ut","","Returns the upper triangular part of the matrix as a new matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"lt","","Returns the lower triangular part of the matrix as a new matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"permuted_rows","","Returns the matrix with permuted rows",24,{"inputs":[{"name":"matrix"},{"name":"matrixu16"}],"output":{"name":"matrix"}}],[11,"permuted_cols","","Returns the matrix with permuted columns",24,{"inputs":[{"name":"matrix"},{"name":"matrixu16"}],"output":{"name":"matrix"}}],[11,"pow","","Computes power of a matrix\nReturns a new matrix",24,{"inputs":[{"name":"matrix"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"inner_prod","","Inner product or dot product of two vectors\nBoth must be column vectors\nBoth must have same length\nresult = a' * b.",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"t"}}],[11,"outer_prod","","Outer product of two vectors\nBoth must be column vectors\nBoth must have same length\nresult = a * b'.",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"unary_minus","","Computes the unary minus of a matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"append_columns","","Appends one or more columns at the end of matrix",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"prepend_columns","","Prepends one or more columns at the beginning of matrix",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"insert_columns","","Inserts columns at the specified location",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"append_rows","","Appends one or more rows at the bottom of matrix",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"prepend_rows","","Prepends one or more rows at the top of matrix",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"insert_rows","","Inserts rows at the specified location",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"view","","Creates a view on the matrix",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixview"}}],[11,"min_scalar","","",24,null],[11,"max_scalar","","",24,null],[11,"min_scalar_value","","Returns the minimum scalar value",24,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[11,"max_scalar_value","","Returns the maximum scalar value",24,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[11,"min_abs_scalar","","",24,null],[11,"max_abs_scalar","","",24,null],[11,"min_abs_scalar_value","","Returns the absolute minimum scalar value",24,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[11,"max_abs_scalar_value","","Returns the absolute maximum scalar value",24,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[11,"is_logical","","Returns if an integer matrix is a logical matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns a matrix showing all the cells which are finite",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"is_infinite","","Returns a matrix showing all the cells which are infinite",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"index","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"}],"output":{"name":"t"}}],[11,"clone","","Creates a clone of the matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"fmt","","",24,{"inputs":[{"name":"matrix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Display and Debug versions are same",24,{"inputs":[{"name":"matrix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"add_elt","","Adds matrices element by element",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"sub_elt","","Subtracts matrices element by element",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"mul_elt","","Multiplies matrices element by element",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"pow_elt","","Computs power of matrix elements",24,{"inputs":[{"name":"matrix"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"div_elt","","Divides matrices element by element",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"drop","","",24,{"inputs":[{"name":"matrix"}],"output":null}],[11,"print_state","","",24,{"inputs":[{"name":"matrix"}],"output":null}],[11,"as_slice_","","Returns a slice into `self`.",24,null],[0,"random","scirust::matrix","",null,null],[5,"rand_std_normal","scirust::matrix::random","Generate a random matrix of uniformly distributed numbers",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixf64"}}],[0,"traits","scirust::matrix","Traits for matrices",null,null],[8,"Shape","scirust::matrix::traits","Defines the features which all matrix types must implement.\nThis API focuses only on the shape of the matrix.",null,null],[10,"num_rows","","Returns the number of rows",25,{"inputs":[{"name":"shape"}],"output":{"name":"usize"}}],[10,"num_cols","","Returns the number of columns",25,{"inputs":[{"name":"shape"}],"output":{"name":"usize"}}],[10,"size","","Returns the size in an (r, c) tuple",25,null],[10,"num_cells","","Returns the number of cells in matrix",25,{"inputs":[{"name":"shape"}],"output":{"name":"usize"}}],[11,"is_row","","Indicates if the matrix is a row vector",25,{"inputs":[{"name":"shape"}],"output":{"name":"bool"}}],[11,"is_col","","Indicates if the matrix is a column vector",25,{"inputs":[{"name":"shape"}],"output":{"name":"bool"}}],[11,"is_scalar","","Indicates if the matrix is a scalar actually",25,{"inputs":[{"name":"shape"}],"output":{"name":"bool"}}],[11,"is_vector","","Indicates if the matrix is a vector",25,{"inputs":[{"name":"shape"}],"output":{"name":"bool"}}],[11,"is_empty","","Indicates if the matrix is empty",25,{"inputs":[{"name":"shape"}],"output":{"name":"bool"}}],[11,"is_square","","Indicates if the matrix is square",25,{"inputs":[{"name":"shape"}],"output":{"name":"bool"}}],[10,"get_unchecked","","Gets an element by its row and column number\nAssumes that the caller knows that (r, c) indices are proper",25,{"inputs":[{"name":"shape"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get","","Gets an element by its row and column number\nReturns data if array bounds are followed.",25,{"inputs":[{"name":"shape"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[10,"set","","Sets an element in the view",25,{"inputs":[{"name":"shape"},{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"index_to_cell","","Converts an index to cell address (row, column)",25,null],[11,"cell_to_index","","Converts a cell address to an index (r, c) to index",25,{"inputs":[{"name":"shape"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"smaller_dim","","Returns the minimum of rows and columns",25,{"inputs":[{"name":"shape"}],"output":{"name":"usize"}}],[11,"larger_dim","","Returns the larger of rows and columns",25,{"inputs":[{"name":"shape"}],"output":{"name":"usize"}}],[8,"MatrixBuffer","","Defines the low level interface to the internal\nmemory buffer of a matrix implementation.  Use it with\ncaution. ",null,null],[10,"as_ptr","","Returns a constant pointer to matrix's buffer",26,null],[10,"as_mut_ptr","","Returns a mutable pointer to matrix's buffer",26,null],[10,"cell_to_offset","","Maps a cell index to actual offset in buffer",26,{"inputs":[{"name":"matrixbuffer"},{"name":"usize"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"start_offset","","Returns the offset of the first cell in the buffer",26,{"inputs":[{"name":"matrixbuffer"}],"output":{"name":"isize"}}],[8,"Strided","","A matrix structure whose storage is in terms\nof columns with a fixed number of storage elements\nper column given by its stride. ",null,null],[10,"stride","","Returns the number of actual memory elements\nper column",27,{"inputs":[{"name":"strided"}],"output":{"name":"usize"}}],[8,"NumberMatrix","","Defines a set of basic methods implemented by matrices of numbers",null,null],[10,"is_identity","","Returns if the matrix is an identity matrix",28,{"inputs":[{"name":"numbermatrix"}],"output":{"name":"bool"}}],[10,"is_diagonal","","Returns if the matrix is a diagonal matrix",28,{"inputs":[{"name":"numbermatrix"}],"output":{"name":"bool"}}],[10,"is_lt","","Returns if the matrix is lower triangular",28,{"inputs":[{"name":"numbermatrix"}],"output":{"name":"bool"}}],[10,"is_ut","","Returns if the matrix is upper triangular",28,{"inputs":[{"name":"numbermatrix"}],"output":{"name":"bool"}}],[11,"is_triangular","","Returns if the matrix is triangular",28,{"inputs":[{"name":"numbermatrix"}],"output":{"name":"bool"}}],[10,"is_symmetric","","Returns if the matrix is symmetric",28,{"inputs":[{"name":"numbermatrix"}],"output":{"name":"bool"}}],[10,"trace","","Returns the trace of the matrix",28,{"inputs":[{"name":"numbermatrix"}],"output":{"name":"t"}}],[8,"StridedNumberMatrix","","A matrix which is both a number matrix and is strided.",null,null],[8,"Introspection","","These methods help in run time to query\nabout the properties of the type which is implementing\nthe trait. ",null,null],[11,"is_matrix_view_type","","Indicates if the matrix is a view",29,{"inputs":[{"name":"introspection"}],"output":{"name":"bool"}}],[11,"is_standard_matrix_type","","Indicates if the matrix is a standard matrix",29,{"inputs":[{"name":"introspection"}],"output":{"name":"bool"}}],[11,"is_triangular_matrix_type","","Indicates if the matrix is a triangular matrix",29,{"inputs":[{"name":"introspection"}],"output":{"name":"bool"}}],[8,"Conversion","","Matrix conversion API",null,null],[10,"to_std_vec","","Converts the matrix to vector from standard library",30,{"inputs":[{"name":"conversion"}],"output":{"name":"vec"}}],[11,"to_scalar","","Converts the matrix to a scalar",30,{"inputs":[{"name":"conversion"}],"output":{"name":"t"}}],[8,"MinMax","","Matrix min-max API",null,null],[10,"max_row_wise","","Returns a column vector consisting of maximum over each row",31,{"inputs":[{"name":"minmax"}],"output":{"name":"matrix"}}],[10,"min_row_wise","","Returns a column vector consisting of minimum over each row",31,{"inputs":[{"name":"minmax"}],"output":{"name":"matrix"}}],[10,"max_col_wise","","Returns a row vector consisting of maximum over each column",31,{"inputs":[{"name":"minmax"}],"output":{"name":"matrix"}}],[10,"min_col_wise","","Returns a row vector consisting of minimum over each column",31,{"inputs":[{"name":"minmax"}],"output":{"name":"matrix"}}],[8,"MinMaxAbs","","Matrix min-max with absolute values API",null,null],[10,"min_abs_scalar","","",32,null],[10,"max_abs_scalar","","",32,null],[8,"Search","","Features for searching within the matrix",null,null],[11,"max_abs_scalar_in_row","","Returns the largest entry (by magnitude) in the row between\n[start, end) columns",33,null],[11,"max_abs_scalar_in_col","","Returns the largest entry (by magnitude) in the column between\n[start, end) rows",33,null],[8,"IntMatrix","","A matrix of integers <T:Number+Int>",null,null],[8,"FloatMatrix","","A matrix of floats T:Number+Float",null,null],[8,"SignedMatrix","","A matrix of signed integers T:Number+SignedInt",null,null],[8,"StridedFloatMatrix","","A strided buffer matrix of floats",null,null],[0,"vector","scirust::matrix","Functions for vectors",null,null],[3,"VecIterator","scirust::matrix::vector","",null,null],[5,"vec_iter","","Constructs a vector iterator for a matrix with the\nassumption that the matrix is indeed a vector",null,{"inputs":[{"name":"matrix"}],"output":{"name":"veciterator"}}],[5,"vec_reduce_sum","","Computes the sum of entries in vector v",null,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[5,"vec_reduce_product","","Computes the product of entries in vector v",null,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[11,"new","","",34,null],[11,"next","","Next element in the vector",34,{"inputs":[{"name":"veciterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the upper and lower bound on the remaining length",34,null],[0,"view","scirust::matrix","",null,null],[3,"MatrixView","scirust::matrix::view","",null,null],[11,"new","","",35,{"inputs":[{"name":"matrixview"},{"name":"matrix"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixview"}}],[11,"start_row","","Returns the start row",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"usize"}}],[11,"start_col","","Returns the start column",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"usize"}}],[11,"matrix","","Returns the underlying matrix reference",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"matrix"}}],[11,"copy_from","","Copies data from other view",35,{"inputs":[{"name":"matrixview"},{"name":"matrixview"}],"output":null}],[11,"copy_scaled_from","","Copies data from other view with scale factor",35,{"inputs":[{"name":"matrixview"},{"name":"matrixview"},{"name":"t"}],"output":null}],[11,"stride","","Returns the number of actual memory elements\nper column stored in the memory",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"usize"}}],[11,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",35,null],[11,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",35,null],[11,"cell_to_offset","","Maps a cell index to actual offset in the internal buffer",35,{"inputs":[{"name":"matrixview"},{"name":"usize"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"start_offset","","Returns the offset of the first cell in the buffer",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"isize"}}],[11,"num_rows","","Returns the number of rows in the view",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"usize"}}],[11,"num_cols","","Returns the number of columns in the view",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"usize"}}],[11,"size","","Returns the size of view in an (r, c) tuple",35,null],[11,"num_cells","","Returns the number of cells in view",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"usize"}}],[11,"get_unchecked","","Gets an element in the view",35,{"inputs":[{"name":"matrixview"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"set","","Sets an element in the view",35,{"inputs":[{"name":"matrixview"},{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"is_identity","","Returns if the matrix is an identity matrix",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"bool"}}],[11,"is_diagonal","","Returns if the matrix is a diagonal matrix",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns if the matrix is lower triangular",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"bool"}}],[11,"is_ut","","Returns if the matrix is upper triangular",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"bool"}}],[11,"is_symmetric","","Returns if the view is symmetric",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"bool"}}],[11,"trace","","",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"t"}}],[11,"to_matrix","","Returns the view as a new matrix.\nCreates a copy of the data.",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"matrix"}}],[11,"is_matrix_view_type","","This is a view inside a matrix",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"bool"}}],[11,"min_scalar","","",35,null],[11,"max_scalar","","",35,null],[11,"min_scalar_value","","Returns the minimum scalar value",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"t"}}],[11,"max_scalar_value","","Returns the maximum scalar value",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"t"}}],[11,"fmt","","",35,{"inputs":[{"name":"matrixview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Display and Debug versions are same",35,{"inputs":[{"name":"matrixview"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"view_conversion","scirust::matrix","",null,null],[11,"to_std_vec","scirust::matrix::view","Converts the view to vector from standard library",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"vec"}}],[0,"view_minmax","scirust::matrix","",null,null],[11,"min_abs_scalar","scirust::matrix::view","",35,null],[11,"max_abs_scalar","","",35,null],[0,"triangular_matrix","scirust::matrix","Implements the triangular matrix data-type",null,null],[3,"TriangularMatrix","scirust::matrix::triangular_matrix","",null,null],[6,"TriangularMatrixI8","","A matrix of 8-bit signed integers",null,null],[6,"TriangularMatrixI16","","A matrix of 16-bit signed integers",null,null],[6,"TriangularMatrixI32","","A matrix of 32-bit signed integers",null,null],[6,"TriangularMatrixI64","","A matrix of 64-bit signed integers",null,null],[6,"TriangularMatrixU8","","A matrix of 8-bit unsigned integers",null,null],[6,"TriangularMatrixU16","","A matrix of 16-bit unsigned integers",null,null],[6,"TriangularMatrixU32","","A matrix of 32-bit unsigned integers",null,null],[6,"TriangularMatrixU64","","A matrix of 64-bit unsigned integers",null,null],[6,"TriangularMatrixF32","","A matrix of 32-bit floating point numbers.",null,null],[6,"TriangularMatrixF64","","A matrix of 64-bit floating point numbers.",null,null],[6,"TriangularMatrixC32","","A matrix of 32-bit complex numbers numbers.",null,null],[6,"TriangularMatrixC64","","A matrix of 64-bit complex numbers numbers.",null,null],[11,"new","","Constructs a new matrix of given size (uninitialized).",36,{"inputs":[{"name":"triangularmatrix"},{"name":"usize"},{"name":"bool"}],"output":{"name":"triangularmatrix"}}],[11,"zeros","","Constructs a triangular matrix of all zeros",36,{"inputs":[{"name":"triangularmatrix"},{"name":"usize"},{"name":"bool"}],"output":{"name":"triangularmatrix"}}],[11,"ones","","Constructs a matrix of all ones.",36,{"inputs":[{"name":"triangularmatrix"},{"name":"usize"},{"name":"bool"}],"output":{"name":"triangularmatrix"}}],[11,"num_rows","","Returns the number of rows in the matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"usize"}}],[11,"num_cols","","Returns the number of columns in the matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"usize"}}],[11,"size","","Returns the size of matrix in an (r, c) tuple",36,null],[11,"num_cells","","Returns the number of cells in matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",36,{"inputs":[{"name":"triangularmatrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"set","","",36,{"inputs":[{"name":"triangularmatrix"},{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"is_identity","","Returns if the matrix is an identity matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"bool"}}],[11,"is_diagonal","","Returns if the matrix is a diagonal matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns if the matrix is lower triangular",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"bool"}}],[11,"is_ut","","Returns if the matrix is upper triangular",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"bool"}}],[11,"is_symmetric","","A triangular matrix is never symmetric",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"bool"}}],[11,"is_triangular","","Returns if the matrix is triangular",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"bool"}}],[11,"trace","","Computes the trace of the matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"t"}}],[11,"is_triangular_matrix_type","","Indicates if the matrix is a triangular matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"bool"}}],[11,"as_ptr","","Returns an unsafe pointer to the matrix's\nbuffer.",36,null],[11,"as_mut_ptr","","Returns a mutable unsafe pointer to\nthe matrix's underlying buffer",36,null],[11,"cell_to_offset","","Maps a cell index to actual offset in the internal buffer",36,{"inputs":[{"name":"triangularmatrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"capacity","","Returns the capacity of the matrix\ni.e. the number of elements it can hold",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"usize"}}],[11,"drop","","",36,{"inputs":[{"name":"triangularmatrix"}],"output":null}],[11,"row","","Returns the r'th row vector",36,{"inputs":[{"name":"triangularmatrix"},{"name":"isize"}],"output":{"name":"matrix"}}],[11,"col","","Returns the c'th column vector",36,{"inputs":[{"name":"triangularmatrix"},{"name":"isize"}],"output":{"name":"matrix"}}],[11,"sub_matrix","","Extract a submatrix from the matrix\nrows can easily repeat if the number of requested rows is higher than actual rows\ncols can easily repeat if the number of requested cols is higher than actual cols",36,{"inputs":[{"name":"triangularmatrix"},{"name":"isize"},{"name":"isize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"ut_matrix","","Returns the upper triangular part of the matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"matrix"}}],[11,"lt_matrix","","Returns the lower triangular part of the matrix",36,{"inputs":[{"name":"triangularmatrix"}],"output":{"name":"matrix"}}],[11,"fmt","","",36,{"inputs":[{"name":"triangularmatrix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Display and Debug versions are same",36,{"inputs":[{"name":"triangularmatrix"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"eo","scirust::matrix","",null,null],[0,"eo_traits","scirust::matrix::eo","",null,null],[8,"ERO","scirust::matrix::eo::eo_traits","Elementary row operations on a matrix",null,null],[11,"ero_switch","","Row switching.",37,{"inputs":[{"name":"ero"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"ero_scale","","Row scaling by a factor.",37,{"inputs":[{"name":"ero"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"ero_scale_slice","","Row scaling by a factor over a slice of the row. [start, end)",37,{"inputs":[{"name":"ero"},{"name":"usize"},{"name":"t"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"ero_scale_add","","Row scaling by a factor and adding to another row.\nr_i = r_i + k * r_j",37,{"inputs":[{"name":"ero"},{"name":"usize"},{"name":"isize"},{"name":"t"}],"output":{"name":"self"}}],[8,"ECO","","Elementary column operations on a matrix",null,null],[11,"eco_switch","","Column switching.",38,{"inputs":[{"name":"eco"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"eco_scale","","Column scaling by a factor.",38,{"inputs":[{"name":"eco"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"eco_scale_slice","","Column scaling by a factor over a slice",38,{"inputs":[{"name":"eco"},{"name":"usize"},{"name":"t"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"eco_scale_add","","Column scaling by a factor and adding to another column.\nc_i = c_i + k * c_j",38,{"inputs":[{"name":"eco"},{"name":"usize"},{"name":"isize"},{"name":"t"}],"output":{"name":"self"}}],[0,"eo_matrix","scirust::matrix::eo","",null,null],[0,"eo_view","","",null,null],[11,"ero_scale_add","scirust::matrix::view","Row scaling by a factor and adding to another row.\nr_i = r_i + k * r_j\nThe j-th row can be outside the view also.\nThis is the row relative to the start of the view.",35,{"inputs":[{"name":"matrixview"},{"name":"usize"},{"name":"isize"},{"name":"t"}],"output":{"name":"matrixview"}}],[11,"eco_scale_add","","Column scaling by a factor and adding to another column.\nc_i = c_i + k * c_j\nThe j-th column can be outside the view also.\nThis is the column relative to the start of the view.",35,{"inputs":[{"name":"matrixview"},{"name":"usize"},{"name":"isize"},{"name":"t"}],"output":{"name":"matrixview"}}],[0,"update","scirust::matrix","",null,null],[0,"traits","scirust::matrix::update","Various kind of updates to the matrix",null,null],[8,"InPlaceUpdates","scirust::matrix::update::traits","Matrix In Place Updates API",null,null],[11,"set_diagonal","","",39,{"inputs":[{"name":"inplaceupdates"},{"name":"t"}],"output":{"name":"self"}}],[11,"set_row","","Sets all the entries on a row to a particular value",39,{"inputs":[{"name":"inplaceupdates"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"set_col","","Sets all the entries on a column to a particular value",39,{"inputs":[{"name":"inplaceupdates"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"set_block","","Sets all the entries on a block to a particular value",39,{"inputs":[{"name":"inplaceupdates"},{"name":"isize"},{"name":"isize"},{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[10,"add_scalar","","Add the matrix by a scalar",39,{"inputs":[{"name":"inplaceupdates"},{"name":"t"}],"output":{"name":"self"}}],[10,"mul_scalar","","Multiply the matrix by a scalar",39,{"inputs":[{"name":"inplaceupdates"},{"name":"t"}],"output":{"name":"self"}}],[10,"div_scalar","","Divide the matrix by a scalar",39,{"inputs":[{"name":"inplaceupdates"},{"name":"t"}],"output":{"name":"srresult"}}],[10,"scale_row_lt","","Scales a specific row in lower triangular part",39,{"inputs":[{"name":"inplaceupdates"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[10,"scale_col_lt","","Scales a specific column in lower triangular part",39,{"inputs":[{"name":"inplaceupdates"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[10,"scale_row_ut","","Scales a specific row in upper triangular part",39,{"inputs":[{"name":"inplaceupdates"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[10,"scale_col_ut","","Scales a specific column in upper triangular part",39,{"inputs":[{"name":"inplaceupdates"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[10,"scale_rows","","Scale all rows as per the scale factors",39,{"inputs":[{"name":"inplaceupdates"},{"name":"matrix"}],"output":{"name":"self"}}],[10,"scale_cols","","Scale all columns as per the scale factors",39,{"inputs":[{"name":"inplaceupdates"},{"name":"matrix"}],"output":{"name":"self"}}],[10,"sub_vec_from_cols","","Subtract a vector from each column",39,{"inputs":[{"name":"inplaceupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"sub_vec_from_rows","","Subtract a vector from each row",39,{"inputs":[{"name":"inplaceupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"add_vec_to_cols","","Subtract a vector from each column",39,{"inputs":[{"name":"inplaceupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"add_vec_to_rows","","Subtract a vector from each row",39,{"inputs":[{"name":"inplaceupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"mul_vec_to_cols","","Subtract a vector from each column",39,{"inputs":[{"name":"inplaceupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"mul_vec_to_rows","","Subtract a vector from each row",39,{"inputs":[{"name":"inplaceupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"ut_to_lt","","Copies data from upper triangular part to lower triangular part",39,{"inputs":[{"name":"inplaceupdates"}],"output":{"name":"self"}}],[8,"CopyUpdates","","Matrix Copy and Update API",null,null],[10,"copy_add_scalar","","Add the matrix by a scalar",40,{"inputs":[{"name":"copyupdates"},{"name":"t"}],"output":{"name":"self"}}],[10,"copy_mul_scalar","","Multiply the matrix by a scalar",40,{"inputs":[{"name":"copyupdates"},{"name":"t"}],"output":{"name":"self"}}],[10,"copy_div_scalar","","Divide the matrix by a scalar",40,{"inputs":[{"name":"copyupdates"},{"name":"t"}],"output":{"name":"self"}}],[10,"copy_sub_vec_from_cols","","Subtract a vector from each column",40,{"inputs":[{"name":"copyupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"copy_sub_vec_from_rows","","Subtract a vector from each row",40,{"inputs":[{"name":"copyupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"copy_add_vec_to_cols","","Subtract a vector from each column",40,{"inputs":[{"name":"copyupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"copy_add_vec_to_rows","","Subtract a vector from each row",40,{"inputs":[{"name":"copyupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"copy_mul_vec_to_cols","","Subtract a vector from each column",40,{"inputs":[{"name":"copyupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[10,"copy_mul_vec_to_rows","","Subtract a vector from each row",40,{"inputs":[{"name":"copyupdates"},{"name":"matrix"}],"output":{"name":"srresult"}}],[0,"matrix_updates","scirust::matrix::update","Implementation of matrix updates",null,null],[11,"add_scalar","scirust::matrix::matrix","",24,{"inputs":[{"name":"matrix"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"mul_scalar","","",24,{"inputs":[{"name":"matrix"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"div_scalar","","",24,{"inputs":[{"name":"matrix"},{"name":"t"}],"output":{"name":"srresult"}}],[11,"scale_row_lt","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"scale_col_lt","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"scale_row_ut","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"scale_col_ut","","",24,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"scale_rows","","",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"scale_cols","","",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"sub_vec_from_cols","","Subtract a vector from each column",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"sub_vec_from_rows","","Subtract a vector from each row",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"add_vec_to_cols","","Subtract a vector from each column",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"add_vec_to_rows","","Subtract a vector from each row",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"mul_vec_to_cols","","Subtract a vector from each column",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"mul_vec_to_rows","","Subtract a vector from each row",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"ut_to_lt","","",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"copy_add_scalar","","Add the matrix by a scalar\nReturns a new matrix",24,{"inputs":[{"name":"matrix"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"copy_mul_scalar","","Multiply the matrix by a scalar\nReturns a new matrix",24,{"inputs":[{"name":"matrix"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"copy_div_scalar","","Divide the matrix by a scalar\nReturns a new matrix",24,{"inputs":[{"name":"matrix"},{"name":"t"}],"output":{"name":"matrix"}}],[11,"copy_sub_vec_from_cols","","Subtract a vector from each column",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"copy_sub_vec_from_rows","","Subtract a vector from each row",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"copy_add_vec_to_cols","","Subtract a vector from each column",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"copy_add_vec_to_rows","","Subtract a vector from each row",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"copy_mul_vec_to_cols","","Subtract a vector from each column",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"copy_mul_vec_to_rows","","Subtract a vector from each row",24,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[0,"transpose","scirust::matrix","",null,null],[0,"traits","scirust::matrix::transpose","",null,null],[8,"Transpose","scirust::matrix::transpose::traits","Implemented by matrix types\nwhich support transpose operations.",null,null],[10,"transpose","","Returns a new matrix holding the transpose",41,{"inputs":[{"name":"transpose"}],"output":{"name":"self"}}],[8,"Frame","","Frame and Grammian operators for a matrix.",null,null],[10,"gram","","Returns the gram matrix : A' * A",42,{"inputs":[{"name":"frame"}],"output":{"name":"self"}}],[0,"matrix_transpose","scirust::matrix::transpose","Matrix transpose and multiplication implementations",null,null],[5,"are_transpose","scirust::matrix::transpose::matrix_transpose","Checks if the matrices are transpose of each other",null,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"bool"}}],[5,"transpose_simple","","Simple implementation of transpose operation",null,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[5,"transpose_block","","Block wise transpose\nThis is more efficient than simple transpose for large matrices \ndue to caching considerations",null,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[5,"multiply_block","","",null,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[5,"multiply_simple","","",null,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[5,"multiply_transpose_simple","","Computes A' * B. (transpose of lhs multiplied with rhs)",null,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"srresult"}}],[11,"transpose","scirust::matrix::matrix","Computes the transpose of a matrix.\nThis doesn't involve complex conjugation.\nReturns a new matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"gram","","",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[0,"extract","scirust::matrix","",null,null],[0,"traits","scirust::matrix::extract","",null,null],[8,"Extraction","scirust::matrix::extract::traits","Matrix extraction API",null,null],[10,"row","","Returns the r'th row vector",43,{"inputs":[{"name":"extraction"},{"name":"isize"}],"output":{"name":"matrix"}}],[10,"col","","Returns the c'th column vector",43,{"inputs":[{"name":"extraction"},{"name":"isize"}],"output":{"name":"matrix"}}],[10,"sub_matrix","","Extract a submatrix from the matrix\nrows can easily repeat if the number of requested rows is higher than actual rows\ncols can easily repeat if the number of requested cols is higher than actual cols",43,{"inputs":[{"name":"extraction"},{"name":"isize"},{"name":"isize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[10,"ut_matrix","","Returns the upper triangular part of the matrix",43,{"inputs":[{"name":"extraction"}],"output":{"name":"matrix"}}],[10,"lt_matrix","","Returns the lower triangular part of the matrix",43,{"inputs":[{"name":"extraction"}],"output":{"name":"matrix"}}],[0,"matrix_extract","scirust::matrix::extract","Implementation of extraction API for matrix type",null,null],[11,"row","scirust::matrix::matrix","Returns the r'th row vector",24,{"inputs":[{"name":"matrix"},{"name":"isize"}],"output":{"name":"matrix"}}],[11,"col","","Returns the c'th column vector",24,{"inputs":[{"name":"matrix"},{"name":"isize"}],"output":{"name":"matrix"}}],[11,"sub_matrix","","Extract a submatrix from the matrix\nrows can easily repeat if the number of requested rows is higher than actual rows\ncols can easily repeat if the number of requested cols is higher than actual cols",24,{"inputs":[{"name":"matrix"},{"name":"isize"},{"name":"isize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"lt_matrix","","Returns the lower triangular part of the matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"ut_matrix","","Returns the upper triangular part of the matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[0,"view_extract","scirust::matrix::extract","Implementation of extraction API for matrix view type",null,null],[11,"row","scirust::matrix::view","Returns the r'th row vector",35,{"inputs":[{"name":"matrixview"},{"name":"isize"}],"output":{"name":"matrix"}}],[11,"col","","Returns the c'th column vector",35,{"inputs":[{"name":"matrixview"},{"name":"isize"}],"output":{"name":"matrix"}}],[11,"sub_matrix","","Extract a submatrix from the matrix\nrows can easily repeat if the number of requested rows is higher than actual rows\ncols can easily repeat if the number of requested cols is higher than actual cols",35,{"inputs":[{"name":"matrixview"},{"name":"isize"},{"name":"isize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"ut_matrix","","Returns the upper triangular part of the matrix",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"matrix"}}],[11,"lt_matrix","","Returns the lower triangular part of the matrix",35,{"inputs":[{"name":"matrixview"}],"output":{"name":"matrix"}}],[0,"matrix_conversion","scirust::matrix","",null,null],[11,"to_std_vec","scirust::matrix::matrix","Converts the matrix to vector from standard library",24,{"inputs":[{"name":"matrix"}],"output":{"name":"vec"}}],[0,"matrix_minmax","scirust::matrix","",null,null],[11,"max_row_wise","scirust::matrix::matrix","Returns a column vector consisting of maximum over each row",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"min_row_wise","","Returns a column vector consisting of minimum over each row",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"max_col_wise","","Returns a row vector consisting of maximum over each column",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"min_col_wise","","Returns a row vector consisting of minimum over each column",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[0,"linalg","scirust","Linear algebra algorithms",null,null],[0,"linear_system","scirust::linalg","Methods for solving linear systems of equations",null,null],[3,"GaussElimination","scirust::linalg::linear_system","A Gauss elimination problem specification",null,null],[12,"a","","The matrix A of AX = B",44,null],[12,"b","","The matrix B of AX = B",44,null],[3,"LinearSystemValidator","","Validates the solution of linear system",null,null],[12,"a","","The matrix A of AX = B",45,null],[12,"x","","The matrix X of AX = B",45,null],[12,"b","","The matrix B of AX = B",45,null],[12,"d","","The difference matrix",45,null],[5,"lt_solve","","Implements the forward substitution algorithm for\nsolving a lower triangular linear system. L X = B",null,{"inputs":[{"name":"matrixf64"},{"name":"matrixf64"}],"output":{"name":"result"}}],[5,"ut_solve","","Implements the back substitution algorithm for\nsolving a upper triangular linear system. L X = B",null,{"inputs":[{"name":"matrixf64"},{"name":"matrixf64"}],"output":{"name":"result"}}],[5,"ldu_solve","","Implements the algorithm for solving the equation LDU X = B\nwhere L, D, U are known (LDU decomposition of A), B is known and X is unknown.\nUses a combination of forward and backward substitutions. ",null,{"inputs":[{"name":"matrixf64"},{"name":"matrixf64"},{"name":"matrixf64"},{"name":"matrixf64"}],"output":{"name":"result"}}],[11,"new","","Setup of a new Gauss elimination problem.",44,{"inputs":[{"name":"gausselimination"},{"name":"matrixf64"},{"name":"matrixf64"}],"output":{"name":"gausselimination"}}],[11,"solve","","Carries out the procedure of Gauss elimination.",44,{"inputs":[{"name":"gausselimination"}],"output":{"name":"result"}}],[11,"new","","Setup of a new Gauss elimination problem.",45,{"inputs":[{"name":"linearsystemvalidator"},{"name":"matrixf64"},{"name":"matrixf64"},{"name":"matrixf64"}],"output":{"name":"linearsystemvalidator"}}],[11,"max_abs_scalar_value","","",45,{"inputs":[{"name":"linearsystemvalidator"}],"output":{"name":"f64"}}],[11,"is_max_abs_val_below_threshold","","Validates the equality Ax = b subject to maximum\nabsolute error being less than a specified threshold.",45,{"inputs":[{"name":"linearsystemvalidator"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"print","","Printing for debugging",45,{"inputs":[{"name":"linearsystemvalidator"}],"output":null}],[0,"det","scirust::linalg","",null,null],[5,"det","scirust::linalg::det","Returns the determinant of a matrix.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"det_float","","Returns the determinant of a matrix of floating point numbers.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"det_naive","","Private implementation of determinant\nAssumes that matrix is indeed square.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[5,"det_ge","","Computes determinant using Gaussian\nelimination with partial pivoting",null,{"inputs":[{"name":"matrix"}],"output":{"name":"t"}}],[0,"lu","scirust::linalg","LU factorization algorithms",null,null],[3,"LUDecomposition","scirust::linalg::lu","LU factorization with partial\npivoting problem setup: PA  = LU",null,null],[12,"perm_vector","","The corresponding permutation vector",46,null],[12,"diag_vector","","The corresponding diagonal vector",46,null],[12,"pre","","Indicates if the permutation matrix is pre or post multiplied",46,null],[5,"lu_ero","","Performs LU factorization  A = LU",null,null],[5,"lup_ero","","Performs LU factorization  PA = LU",null,null],[5,"lu_eco","","Performs LU factorization  A = LU",null,null],[5,"lup_eco","","Performs LU factorization  AP = LU",null,null],[11,"new","","Setup of a new LU factorization with partial pivot problem",46,{"inputs":[{"name":"ludecomposition"},{"name":"matrixf64"}],"output":{"name":"ludecomposition"}}],[11,"decompose_ero","","Performs LU factorization with partial pivoting using row operations",46,{"inputs":[{"name":"ludecomposition"}],"output":null}],[11,"decompose_eco","","Performs LU factorization with partial pivoting using column operations",46,{"inputs":[{"name":"ludecomposition"}],"output":null}],[11,"decompose_crout","","Performs LU factorization with partial pivoting using\nCrout's algorithm",46,{"inputs":[{"name":"ludecomposition"}],"output":{"name":"result"}}],[11,"max_abs_diff","","Finds the maximum absolute entry in a - ldu",46,{"inputs":[{"name":"ludecomposition"},{"name":"matrixf64"}],"output":{"name":"f64"}}],[11,"l","","",46,{"inputs":[{"name":"ludecomposition"}],"output":{"name":"matrixf64"}}],[11,"u","","",46,{"inputs":[{"name":"ludecomposition"}],"output":{"name":"matrixf64"}}],[11,"p","","",46,{"inputs":[{"name":"ludecomposition"}],"output":{"name":"matrixf64"}}],[11,"d","","",46,{"inputs":[{"name":"ludecomposition"}],"output":{"name":"matrixf64"}}],[11,"det","","Computes the determinant",46,{"inputs":[{"name":"ludecomposition"}],"output":{"name":"f64"}}],[11,"print","","",46,{"inputs":[{"name":"ludecomposition"}],"output":null}],[0,"singularity","scirust::linalg","Methods for checking singularity or invertibility of matrices.",null,null],[5,"is_singular_lt","scirust::linalg::singularity","Indicates if a lower triangular matrix is singular or not.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[5,"is_singular_ut","","Indicates if a upper triangular matrix is singular or not.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[5,"is_singular_triangular","","Indicates if a triangular matrix is singular or not.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[5,"is_singular_diagonal","","Indicates if a diagonal matrix is singular or not.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[5,"has_zero_on_diagonal","","Checks if any entry on the main diagonal is zero",null,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[0,"inverse","scirust::linalg","Matrix inverse computation methods",null,null],[5,"inverse_ero","scirust::linalg::inverse","Computes the inverse of a matrix using elementary row operations",null,{"inputs":[{"name":"matrixf64"}],"output":{"name":"result"}}],[5,"inverse_eco","","Computes the inverse of a matrix using elementary column operations",null,{"inputs":[{"name":"matrixf64"}],"output":{"name":"result"}}],[0,"rank","scirust::linalg","Matrix rank computation methods",null,null],[5,"rank_eco","scirust::linalg::rank","Computes the rank of a matrix using elementary column operations",null,{"inputs":[{"name":"matrixf64"}],"output":{"name":"usize"}}],[5,"rank","","",null,{"inputs":[{"name":"matrixf64"}],"output":{"name":"usize"}}],[0,"matrix","scirust::linalg","",null,null],[0,"mat_impl","scirust::linalg::matrix","",null,null],[11,"det","scirust::matrix::matrix","Returns determinant of the matrix",24,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[0,"mat_traits","scirust::linalg::matrix","",null,null],[8,"LANumberMatrix","scirust::linalg::matrix::mat_traits","Linear algebra methods for matrix of numbers",null,null],[10,"det","","Returns the determinant of the matrix",47,{"inputs":[{"name":"lanumbermatrix"}],"output":{"name":"result"}}],[8,"LAIntMatrix","","Linear algebra methods for integer matrix",null,null],[8,"LASignedMatrix","","Linear algebra methods for signed integer matrix",null,null],[8,"LAFloatMatrix","","Linear algebra methods for float matrix",null,null],[0,"signal","scirust","Signal processing",null,null],[3,"Impulse","scirust::signal","",null,null],[5,"impulse_f64","","",null,{"inputs":[],"output":{"name":"impulse"}}],[5,"impulse_vector","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[5,"impulse_vector_f64","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixf64"}}],[11,"new","","",48,{"inputs":[{"name":"impulse"},{"name":"usize"}],"output":{"name":"impulse"}}],[11,"one","","",48,{"inputs":[{"name":"impulse"}],"output":{"name":"t"}}],[11,"next","","",48,{"inputs":[{"name":"impulse"}],"output":{"name":"option"}}],[0,"dx","scirust","Data exchange",null,null],[0,"stat","","Statistics",null,null],[0,"moments","scirust::stat","",null,null],[0,"traits","scirust::stat::moments","Traits describing statistical moments of data",null,null],[8,"Sums","scirust::stat::moments::traits","",null,null],[10,"sum_cw","","Computes sum over columns and returns a row vector",49,{"inputs":[{"name":"sums"}],"output":{"name":"matrix"}}],[10,"sum_rw","","Computes sum over rows and returns a column vector",49,{"inputs":[{"name":"sums"}],"output":{"name":"matrix"}}],[10,"sum_sqr_cw","","Computes sum of squares over columns and returns a row vector",49,{"inputs":[{"name":"sums"}],"output":{"name":"matrix"}}],[10,"sum_sqr_rw","","Computes sum of squares over rows and returns a column vector",49,{"inputs":[{"name":"sums"}],"output":{"name":"matrix"}}],[8,"Moments","","",null,null],[10,"mean_cw","","Computes mean over columns and returns a row vector",50,{"inputs":[{"name":"moments"}],"output":{"name":"matrix"}}],[10,"mean_rw","","Computes mean over rows and returns a column vector",50,{"inputs":[{"name":"moments"}],"output":{"name":"matrix"}}],[10,"mean_sqr_cw","","Computes mean square over columns and returns a row vector",50,{"inputs":[{"name":"moments"}],"output":{"name":"matrix"}}],[10,"mean_sqr_rw","","Computes mean square over rows and returns a column vector",50,{"inputs":[{"name":"moments"}],"output":{"name":"matrix"}}],[10,"var_cw","","Computes sample variance over columns and returns a row vector\nsum((m - repmat(mean(m), r, 1)).^2 ) / (r - 1)",50,{"inputs":[{"name":"moments"}],"output":{"name":"matrix"}}],[10,"var_rw","","Computes sample variance over rows and returns a column vector",50,{"inputs":[{"name":"moments"}],"output":{"name":"matrix"}}],[10,"cov","","Computes the sample covariance from a set of example vectors.\nWhen self is a proper matrix, then we consider each row as an observation\nand each column as a random variable. ",50,{"inputs":[{"name":"moments"}],"output":{"name":"matrix"}}],[0,"matrix_moments","scirust::stat::moments","Implementation of statistical moments for matrices",null,null],[11,"sum_cw","scirust::matrix::matrix","Computes sum over columns and returns a row vector",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"sum_rw","","",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"sum_sqr_cw","","Computes sum of squares over columns and returns a row vector",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"sum_sqr_rw","","Computes sum of squares over rows and returns a column vector",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"mean_cw","","",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"mean_rw","","Computes mean over rows and returns a column vector",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"mean_sqr_cw","","",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"mean_sqr_rw","","Computes mean square over rows and returns a column vector",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"var_cw","","Computes sample variance over columns and returns a row vector\nsum((m - repmat(mean(m), r, 1)).^2 ) / (r - 1)",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"var_rw","","Computes sample variance over rows and returns a column vector",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"cov","","Computes the sample covariance from a set of example vectors.\nEach column in x is a sample vector from the population.",24,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[0,"alg","scirust","Algorithms",null,null],[0,"sort","scirust::alg","Sorting algorithms",null,null],[5,"is_ascending_slice","scirust::alg::sort","Returns whether the slice is sorted in ascending order or not.",null,null],[5,"is_descending_slice","","Returns whether the slice is sorted in descending order or not.",null,null],[5,"is_ascending_buffer","","Returns whether the data in buffer is sorted in ascending order or not.",null,null],[5,"is_descending_buffer","","Returns whether the data in buffer is sorted in descending order or not.",null,null],[5,"is_ascending_buffer_strided","","Returns whether the data in strided buffer is sorted in ascending order or not\nevery stride-th entry is considered in the buffer\nassumes that the buffer as at least n* stride entries",null,null],[5,"is_descending_buffer_strided","","Returns whether the data in strided buffer is sorted in ascending order or not\nevery stride-th entry is considered in the buffer\nassumes that the buffer as at least n* stride entries",null,null],[0,"quick_sort","","Quick sort algorithms",null,null],[5,"quick_sort_slice","scirust::alg::sort::quick_sort","Quick sort algorithm on a slice of data",null,null],[5,"print_arr","","",null,null],[5,"quick_sort_buffer","","Quick sort algorithm on a buffer of data",null,null],[0,"insertion_sort","scirust::alg::sort","Insertion sort algorithms",null,null],[5,"insertion_sort_slice","scirust::alg::sort::insertion_sort","Performs insertion sort on a slice of type T",null,null],[5,"insertion_sort_buffer","","Performs insertion sort on a buffer of data",null,null],[0,"util","scirust","Utility software",null,null],[0,"memory","scirust::util","",null,null],[5,"dealloc","scirust::util::memory","Deallocates a buffer of memory",null,null],[0,"print","scirust::util","",null,null],[5,"print_slice","scirust::util::print","",null,null],[0,"api","scirust","SciRust API",null,null]],"paths":[[4,"SRError"],[8,"Recip"],[8,"SemiGroupAddPartial"],[8,"SemiGroupAdd"],[8,"SemiGroupMulPartial"],[8,"CommutativeMonoidAddPartial"],[8,"CommutativeMonoidAdd"],[8,"CommutativeMonoidMulPartial"],[8,"CommutativeMonoidMul"],[8,"CommutativeGroupAddPartial"],[8,"CommutativeGroupAdd"],[8,"CommutativeGroupMulPartial"],[8,"CommutativeGroupMul"],[8,"RingPartial"],[8,"Ring"],[8,"CommutativeRingPartial"],[8,"CommutativeRing"],[8,"FieldPartial"],[8,"Field"],[3,"Complex"],[3,"RowIterator"],[3,"ColIterator"],[3,"CellIterator"],[3,"DiagIterator"],[3,"Matrix"],[8,"Shape"],[8,"MatrixBuffer"],[8,"Strided"],[8,"NumberMatrix"],[8,"Introspection"],[8,"Conversion"],[8,"MinMax"],[8,"MinMaxAbs"],[8,"Search"],[3,"VecIterator"],[3,"MatrixView"],[3,"TriangularMatrix"],[8,"ERO"],[8,"ECO"],[8,"InPlaceUpdates"],[8,"CopyUpdates"],[8,"Transpose"],[8,"Frame"],[8,"Extraction"],[3,"GaussElimination"],[3,"LinearSystemValidator"],[3,"LUDecomposition"],[8,"LANumberMatrix"],[3,"Impulse"],[8,"Sums"],[8,"Moments"]]};
initSearch(searchIndex);
